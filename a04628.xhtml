<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Super4PCS Library: GlobalRegistration::Accelerators::PairExtraction::NdNode&lt; Point, _dim, Scalar, _PointContainer, _IdContainer &gt; Class Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js", "TeX/AMSsymbols.js", "TeX/AMSmath.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Super4PCS Library
   &#160;<span id="projectnumber">V1.1.2(996102d)</span>
   </div>
  </td>
   <td>        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
</td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('a04628.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="a04625.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">GlobalRegistration::Accelerators::PairExtraction::NdNode&lt; Point, _dim, Scalar, _PointContainer, _IdContainer &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Multidimensional node used for intersection query.  
 <a href="a04628.xhtml#details">More...</a></p>
<div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Collaboration diagram for GlobalRegistration::Accelerators::PairExtraction::NdNode&lt; Point, _dim, Scalar, _PointContainer, _IdContainer &gt;:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="a04626.svg" width="224" height="294"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a7ea379ecbcfd6376baf6bd62bf999d5b"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom">{ <a class="el" href="a04628.xhtml#a7ea379ecbcfd6376baf6bd62bf999d5badf7150a44e62a0e43b5fd4fcd560c11e">Dim</a> = _dim
 }</td></tr>
<tr class="separator:a7ea379ecbcfd6376baf6bd62bf999d5b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af4d06317119da3ae42f0273b68f25c39"><td class="memItemLeft" align="right" valign="top">typedef _PointContainer&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a04628.xhtml#af4d06317119da3ae42f0273b68f25c39">PointContainer</a></td></tr>
<tr class="separator:af4d06317119da3ae42f0273b68f25c39"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3d3118ced46f1c9c73fe5912dddbcae7"><td class="memItemLeft" align="right" valign="top">typedef _IdContainer&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a04628.xhtml#a3d3118ced46f1c9c73fe5912dddbcae7">IdContainer</a></td></tr>
<tr class="separator:a3d3118ced46f1c9c73fe5912dddbcae7"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a9d187ab41909fb84930c9494c551b4e5"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a04628.xhtml#a9d187ab41909fb84930c9494c551b4e5">NdNode</a> (const <a class="el" href="a04628.xhtml#af4d06317119da3ae42f0273b68f25c39">PointContainer</a> &amp;points, <a class="el" href="a04628.xhtml#a3d3118ced46f1c9c73fe5912dddbcae7">IdContainer</a> &amp;ids, const Point &amp;p=Point::Zero(), unsigned int begin=0, unsigned int end=0)</td></tr>
<tr class="separator:a9d187ab41909fb84930c9494c551b4e5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2fde20b7a2aaf630acb8aa0cd67bd2a5"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a04628.xhtml#a2fde20b7a2aaf630acb8aa0cd67bd2a5">NdNode</a> (const <a class="el" href="a04628.xhtml">NdNode</a>&lt; Point, _dim, Scalar, _PointContainer, _IdContainer &gt; &amp;other)</td></tr>
<tr class="separator:a2fde20b7a2aaf630acb8aa0cd67bd2a5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab50d2303b6f101342aed32e41418cf5a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="a04628.xhtml">NdNode</a>&lt; Point, _dim, Scalar, _PointContainer, _IdContainer &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a04628.xhtml#ab50d2303b6f101342aed32e41418cf5a">operator=</a> (const <a class="el" href="a04628.xhtml">NdNode</a>&lt; Point, _dim, Scalar, _PointContainer, _IdContainer &gt; &amp;rhs)</td></tr>
<tr class="separator:ab50d2303b6f101342aed32e41418cf5a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af5a780e188cf8bdb020dc88fd25073a6"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a04628.xhtml#af5a780e188cf8bdb020dc88fd25073a6">~NdNode</a> ()</td></tr>
<tr class="separator:af5a780e188cf8bdb020dc88fd25073a6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a05ae731f6e6878a7c0a2c2160fe171c8"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a04628.xhtml#a05ae731f6e6878a7c0a2c2160fe171c8">rangeLength</a> () const</td></tr>
<tr class="memdesc:a05ae731f6e6878a7c0a2c2160fe171c8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Length of the range covered by this node in the id array.  <a href="#a05ae731f6e6878a7c0a2c2160fe171c8">More...</a><br /></td></tr>
<tr class="separator:a05ae731f6e6878a7c0a2c2160fe171c8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5b678bef340c5b06daa28aa91749ec4d"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a04628.xhtml#a5b678bef340c5b06daa28aa91749ec4d">rangeBegin</a> () const</td></tr>
<tr class="memdesc:a5b678bef340c5b06daa28aa91749ec4d"><td class="mdescLeft">&#160;</td><td class="mdescRight">First position in the id array defining the current instance range.  <a href="#a5b678bef340c5b06daa28aa91749ec4d">More...</a><br /></td></tr>
<tr class="separator:a5b678bef340c5b06daa28aa91749ec4d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad7e27bc794c4957e09cb01719341802b"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a04628.xhtml#ad7e27bc794c4957e09cb01719341802b">rangeEnd</a> () const</td></tr>
<tr class="memdesc:ad7e27bc794c4957e09cb01719341802b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Last position in the id array defining the current instance range.  <a href="#ad7e27bc794c4957e09cb01719341802b">More...</a><br /></td></tr>
<tr class="separator:ad7e27bc794c4957e09cb01719341802b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afd1e4855f1c7db9035c1505eecfe3b50"><td class="memItemLeft" align="right" valign="top">const Point &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a04628.xhtml#afd1e4855f1c7db9035c1505eecfe3b50">pointInRange</a> (unsigned int i) const</td></tr>
<tr class="memdesc:afd1e4855f1c7db9035c1505eecfe3b50"><td class="mdescLeft">&#160;</td><td class="mdescRight">Access to the i-eme point in the node. Range limits are NOT tested!  <a href="#afd1e4855f1c7db9035c1505eecfe3b50">More...</a><br /></td></tr>
<tr class="separator:afd1e4855f1c7db9035c1505eecfe3b50"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a321a724422822bb338a04e97dbd09869"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a04628.xhtml#a321a724422822bb338a04e97dbd09869">idInRange</a> (unsigned int i) const</td></tr>
<tr class="memdesc:a321a724422822bb338a04e97dbd09869"><td class="mdescLeft">&#160;</td><td class="mdescRight">Access to the i-eme point in the node. Range limits are NOT tested!  <a href="#a321a724422822bb338a04e97dbd09869">More...</a><br /></td></tr>
<tr class="separator:a321a724422822bb338a04e97dbd09869"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9ce8528d649d942643cbb763e6c07ada"><td class="memItemLeft" align="right" valign="top">const Point &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a04628.xhtml#a9ce8528d649d942643cbb763e6c07ada">center</a> () const</td></tr>
<tr class="memdesc:a9ce8528d649d942643cbb763e6c07ada"><td class="mdescLeft">&#160;</td><td class="mdescRight">Center of the current node.  <a href="#a9ce8528d649d942643cbb763e6c07ada">More...</a><br /></td></tr>
<tr class="separator:a9ce8528d649d942643cbb763e6c07ada"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aec88c98c61215c5d15194f2a94270b55"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a04628.xhtml#aec88c98c61215c5d15194f2a94270b55">split</a> (std::vector&lt; <a class="el" href="a04628.xhtml">NdNode</a>&lt; Point, _dim, Scalar, _PointContainer, _IdContainer &gt; &gt; &amp;childs, Scalar rootEdgeHalfLength)</td></tr>
<tr class="memdesc:aec88c98c61215c5d15194f2a94270b55"><td class="mdescLeft">&#160;</td><td class="mdescRight">Split the node and compute child nodes.  <a href="#aec88c98c61215c5d15194f2a94270b55">More...</a><br /></td></tr>
<tr class="separator:aec88c98c61215c5d15194f2a94270b55"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:af10556775b4770819b502bf59805b342"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="a04628.xhtml">NdNode</a>&lt; Point, _dim, Scalar, _PointContainer, _IdContainer &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a04628.xhtml#af10556775b4770819b502bf59805b342">buildUnitRootNode</a> (const <a class="el" href="a04628.xhtml#af4d06317119da3ae42f0273b68f25c39">PointContainer</a> &amp;points, <a class="el" href="a04628.xhtml#a3d3118ced46f1c9c73fe5912dddbcae7">IdContainer</a> &amp;ids)</td></tr>
<tr class="separator:af10556775b4770819b502bf59805b342"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;class Point, int _dim, typename Scalar, class _PointContainer = std::vector&lt;Point&gt;, class _IdContainer = std::vector&lt;unsigned int&gt;&gt;<br />
class GlobalRegistration::Accelerators::PairExtraction::NdNode&lt; Point, _dim, Scalar, _PointContainer, _IdContainer &gt;</h3>

<p>Multidimensional node used for intersection query. </p>
<p>Each instance store references to the data arrays:</p><ul>
<li>const access to the input points</li>
<li>writing access to the dereferencing id array</li>
</ul>
<p>The working dimension is deduced from the Point class </p>
</div><h2 class="groupheader">Member Typedef Documentation</h2>
<a id="a3d3118ced46f1c9c73fe5912dddbcae7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3d3118ced46f1c9c73fe5912dddbcae7">&#9670;&nbsp;</a></span>IdContainer</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Point, int _dim, typename Scalar, class _PointContainer = std::vector&lt;Point&gt;, class _IdContainer = std::vector&lt;unsigned int&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">typedef _IdContainer <a class="el" href="a04628.xhtml">GlobalRegistration::Accelerators::PairExtraction::NdNode</a>&lt; Point, _dim, Scalar, _PointContainer, _IdContainer &gt;::<a class="el" href="a04628.xhtml#a3d3118ced46f1c9c73fe5912dddbcae7">IdContainer</a></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="af4d06317119da3ae42f0273b68f25c39"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af4d06317119da3ae42f0273b68f25c39">&#9670;&nbsp;</a></span>PointContainer</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Point, int _dim, typename Scalar, class _PointContainer = std::vector&lt;Point&gt;, class _IdContainer = std::vector&lt;unsigned int&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">typedef _PointContainer <a class="el" href="a04628.xhtml">GlobalRegistration::Accelerators::PairExtraction::NdNode</a>&lt; Point, _dim, Scalar, _PointContainer, _IdContainer &gt;::<a class="el" href="a04628.xhtml#af4d06317119da3ae42f0273b68f25c39">PointContainer</a></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Enumeration Documentation</h2>
<a id="a7ea379ecbcfd6376baf6bd62bf999d5b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7ea379ecbcfd6376baf6bd62bf999d5b">&#9670;&nbsp;</a></span>anonymous enum</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Point, int _dim, typename Scalar, class _PointContainer = std::vector&lt;Point&gt;, class _IdContainer = std::vector&lt;unsigned int&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">anonymous enum</td>
        </tr>
      </table>
</div><div class="memdoc">
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a7ea379ecbcfd6376baf6bd62bf999d5badf7150a44e62a0e43b5fd4fcd560c11e"></a>Dim&#160;</td><td class="fielddoc"></td></tr>
</table>

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a9d187ab41909fb84930c9494c551b4e5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9d187ab41909fb84930c9494c551b4e5">&#9670;&nbsp;</a></span>NdNode() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Point, int _dim, typename Scalar, class _PointContainer = std::vector&lt;Point&gt;, class _IdContainer = std::vector&lt;unsigned int&gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="a04628.xhtml">GlobalRegistration::Accelerators::PairExtraction::NdNode</a>&lt; Point, _dim, Scalar, _PointContainer, _IdContainer &gt;::<a class="el" href="a04628.xhtml">NdNode</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="a04628.xhtml#af4d06317119da3ae42f0273b68f25c39">PointContainer</a> &amp;&#160;</td>
          <td class="paramname"><em>points</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="a04628.xhtml#a3d3118ced46f1c9c73fe5912dddbcae7">IdContainer</a> &amp;&#160;</td>
          <td class="paramname"><em>ids</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Point &amp;&#160;</td>
          <td class="paramname"><em>p</em> = <code>Point::Zero()</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>begin</em> = <code>0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>end</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a2fde20b7a2aaf630acb8aa0cd67bd2a5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2fde20b7a2aaf630acb8aa0cd67bd2a5">&#9670;&nbsp;</a></span>NdNode() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Point, int _dim, typename Scalar, class _PointContainer = std::vector&lt;Point&gt;, class _IdContainer = std::vector&lt;unsigned int&gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="a04628.xhtml">GlobalRegistration::Accelerators::PairExtraction::NdNode</a>&lt; Point, _dim, Scalar, _PointContainer, _IdContainer &gt;::<a class="el" href="a04628.xhtml">NdNode</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="a04628.xhtml">NdNode</a>&lt; Point, _dim, Scalar, _PointContainer, _IdContainer &gt; &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="af5a780e188cf8bdb020dc88fd25073a6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af5a780e188cf8bdb020dc88fd25073a6">&#9670;&nbsp;</a></span>~NdNode()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Point, int _dim, typename Scalar, class _PointContainer = std::vector&lt;Point&gt;, class _IdContainer = std::vector&lt;unsigned int&gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="a04628.xhtml">GlobalRegistration::Accelerators::PairExtraction::NdNode</a>&lt; Point, _dim, Scalar, _PointContainer, _IdContainer &gt;::~<a class="el" href="a04628.xhtml">NdNode</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="af10556775b4770819b502bf59805b342"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af10556775b4770819b502bf59805b342">&#9670;&nbsp;</a></span>buildUnitRootNode()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Point, int _dim, typename Scalar, class _PointContainer = std::vector&lt;Point&gt;, class _IdContainer = std::vector&lt;unsigned int&gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="a04628.xhtml">NdNode</a>&lt;Point, _dim, Scalar, _PointContainer, _IdContainer&gt; <a class="el" href="a04628.xhtml">GlobalRegistration::Accelerators::PairExtraction::NdNode</a>&lt; Point, _dim, Scalar, _PointContainer, _IdContainer &gt;::buildUnitRootNode </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="a04628.xhtml#af4d06317119da3ae42f0273b68f25c39">PointContainer</a> &amp;&#160;</td>
          <td class="paramname"><em>points</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="a04628.xhtml#a3d3118ced46f1c9c73fe5912dddbcae7">IdContainer</a> &amp;&#160;</td>
          <td class="paramname"><em>ids</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a9ce8528d649d942643cbb763e6c07ada"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9ce8528d649d942643cbb763e6c07ada">&#9670;&nbsp;</a></span>center()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Point, int _dim, typename Scalar, class _PointContainer = std::vector&lt;Point&gt;, class _IdContainer = std::vector&lt;unsigned int&gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const Point&amp; <a class="el" href="a04628.xhtml">GlobalRegistration::Accelerators::PairExtraction::NdNode</a>&lt; Point, _dim, Scalar, _PointContainer, _IdContainer &gt;::center </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Center of the current node. </p>
<div id="dynsection-1" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-1-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-1-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-1-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="a04628_a9ce8528d649d942643cbb763e6c07ada_cgraph.svg" width="623" height="67"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a321a724422822bb338a04e97dbd09869"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a321a724422822bb338a04e97dbd09869">&#9670;&nbsp;</a></span>idInRange()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Point, int _dim, typename Scalar, class _PointContainer = std::vector&lt;Point&gt;, class _IdContainer = std::vector&lt;unsigned int&gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int <a class="el" href="a04628.xhtml">GlobalRegistration::Accelerators::PairExtraction::NdNode</a>&lt; Point, _dim, Scalar, _PointContainer, _IdContainer &gt;::idInRange </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>i</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Access to the i-eme point in the node. Range limits are NOT tested! </p>

</div>
</div>
<a id="ab50d2303b6f101342aed32e41418cf5a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab50d2303b6f101342aed32e41418cf5a">&#9670;&nbsp;</a></span>operator=()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Point, int _dim, typename Scalar, class _PointContainer = std::vector&lt;Point&gt;, class _IdContainer = std::vector&lt;unsigned int&gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="a04628.xhtml">NdNode</a>&lt;Point, _dim, Scalar, _PointContainer, _IdContainer&gt;&amp; <a class="el" href="a04628.xhtml">GlobalRegistration::Accelerators::PairExtraction::NdNode</a>&lt; Point, _dim, Scalar, _PointContainer, _IdContainer &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="a04628.xhtml">NdNode</a>&lt; Point, _dim, Scalar, _PointContainer, _IdContainer &gt; &amp;&#160;</td>
          <td class="paramname"><em>rhs</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="afd1e4855f1c7db9035c1505eecfe3b50"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afd1e4855f1c7db9035c1505eecfe3b50">&#9670;&nbsp;</a></span>pointInRange()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Point, int _dim, typename Scalar, class _PointContainer = std::vector&lt;Point&gt;, class _IdContainer = std::vector&lt;unsigned int&gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const Point&amp; <a class="el" href="a04628.xhtml">GlobalRegistration::Accelerators::PairExtraction::NdNode</a>&lt; Point, _dim, Scalar, _PointContainer, _IdContainer &gt;::pointInRange </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>i</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Access to the i-eme point in the node. Range limits are NOT tested! </p>

</div>
</div>
<a id="a5b678bef340c5b06daa28aa91749ec4d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5b678bef340c5b06daa28aa91749ec4d">&#9670;&nbsp;</a></span>rangeBegin()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Point, int _dim, typename Scalar, class _PointContainer = std::vector&lt;Point&gt;, class _IdContainer = std::vector&lt;unsigned int&gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int <a class="el" href="a04628.xhtml">GlobalRegistration::Accelerators::PairExtraction::NdNode</a>&lt; Point, _dim, Scalar, _PointContainer, _IdContainer &gt;::rangeBegin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>First position in the id array defining the current instance range. </p>

</div>
</div>
<a id="ad7e27bc794c4957e09cb01719341802b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad7e27bc794c4957e09cb01719341802b">&#9670;&nbsp;</a></span>rangeEnd()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Point, int _dim, typename Scalar, class _PointContainer = std::vector&lt;Point&gt;, class _IdContainer = std::vector&lt;unsigned int&gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int <a class="el" href="a04628.xhtml">GlobalRegistration::Accelerators::PairExtraction::NdNode</a>&lt; Point, _dim, Scalar, _PointContainer, _IdContainer &gt;::rangeEnd </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Last position in the id array defining the current instance range. </p>

</div>
</div>
<a id="a05ae731f6e6878a7c0a2c2160fe171c8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a05ae731f6e6878a7c0a2c2160fe171c8">&#9670;&nbsp;</a></span>rangeLength()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Point, int _dim, typename Scalar, class _PointContainer = std::vector&lt;Point&gt;, class _IdContainer = std::vector&lt;unsigned int&gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="a04628.xhtml">GlobalRegistration::Accelerators::PairExtraction::NdNode</a>&lt; Point, _dim, Scalar, _PointContainer, _IdContainer &gt;::rangeLength </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Length of the range covered by this node in the id array. </p>

</div>
</div>
<a id="aec88c98c61215c5d15194f2a94270b55"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aec88c98c61215c5d15194f2a94270b55">&#9670;&nbsp;</a></span>split()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Point , int _dim, typename Scalar , class _PointContainer , class _IdContainer &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="a04628.xhtml">GlobalRegistration::Accelerators::PairExtraction::NdNode</a>&lt; Point, _dim, Scalar, _PointContainer, _IdContainer &gt;::split </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; <a class="el" href="a04628.xhtml">NdNode</a>&lt; Point, _dim, Scalar, _PointContainer, _IdContainer &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>childs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Scalar&#160;</td>
          <td class="paramname"><em>rootEdgeHalfLength</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Split the node and compute child nodes. </p>
<p>Split the current node in 2^Dim childs using a regular grid.</p>
<dl class="section note"><dt>Note</dt><dd>Childs are not stored </dd></dl>
<p>The IdContainer is updated to partially sort the input ids wrt to the childs range limits.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ChildContainer</td><td>in: </td></tr>
  </table>
  </dd>
</dl>
<p>Compute number of childs at compile time</p>
<p>init all potential nodes using the root values</p>
<p>Split successively along all the dimensions of the ambiant space This algorithm cannot be parallelized</p>
<p>can be deduced at</p>
<p>compile time with</p>
<p>loop unrollement</p>
<p>Iterate over all splits and compute them for the current dimension</p>
<p>Transmit the split to the related nodes</p>
<p>Remove childs not containing any element </p>
<div id="dynsection-2" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-2-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-2-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-2-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="a04628_aec88c98c61215c5d15194f2a94270b55_cgraph.svg" width="382" height="67"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="a04027.xhtml">GlobalRegistration</a></li><li class="navelem"><a class="el" href="a04028.xhtml">Accelerators</a></li><li class="navelem"><a class="el" href="a04029.xhtml">PairExtraction</a></li><li class="navelem"><a class="el" href="a04628.xhtml">NdNode</a></li>
    <li class="footer">Generated on Tue Sep 19 2017 10:16:07 for Super4PCS Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
