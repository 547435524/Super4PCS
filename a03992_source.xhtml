<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Super4PCS Library: /export/home/cezanne/nmellado/git/Super4PCS/src/super4pcs/algorithms/match4pcsBase.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js", "TeX/AMSsymbols.js", "TeX/AMSmath.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Super4PCS Library
   &#160;<span id="projectnumber">V1.1.2(996102d)</span>
   </div>
  </td>
   <td>        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
</td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('a03992_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">match4pcsBase.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">// Copyright 2017 Nicolas Mellado</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">// you may not use this file except in compliance with the License.</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">// You may obtain a copy of the License at</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">//   http://www.apache.org/licenses/LICENSE-2.0</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">// Unless required by applicable law or agreed to in writing, software</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">// distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">// See the License for the specific language governing permissions and</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">// limitations under the License.</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">// -------------------------------------------------------------------------- //</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">// Authors: Dror Aiger, Yoni Weill, Nicolas Mellado</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">// This file is part of the implementation of the 4-points Congruent Sets (4PCS)</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment">// algorithm presented in:</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment">// 4-points Congruent Sets for Robust Surface Registration</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">// Dror Aiger, Niloy J. Mitra, Daniel Cohen-Or</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment">// ACM SIGGRAPH 2008 and ACM Transaction of Graphics.</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment">// Given two sets of points in 3-space, P and Q, the algorithm applies RANSAC</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="comment">// in roughly O(n^2) time instead of O(n^3) for standard RANSAC, using an</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="comment">// efficient method based on invariants, to find the set of all 4-points in Q</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment">// that can be matched by rigid transformation to a given set of 4-points in P</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment">// called a base. This avoids the need to examine all sets of 3-points in Q</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment">// against any base of 3-points in P as in standard RANSAC.</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="comment">// The algorithm can use colors and normals to speed-up the matching</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="comment">// and to improve the quality. It can be easily extended to affine/similarity</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="comment">// transformation but then the speed-up is smaller because of the large number</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment">// of congruent sets. The algorithm can also limit the range of transformations</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment">// when the application knows something on the initial pose but this is not</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">// necessary in general (though can speed the runtime significantly).</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment">// Home page of the 4PCS project (containing the paper, presentations and a</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment">// demo): http://graphics.stanford.edu/~niloy/research/fpcs/fpcs_sig_08.html</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment">// Use google search on &quot;4-points congruent sets&quot; to see many related papers</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment">// and applications.</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="preprocessor">#ifndef _SUPER4PCS_ALGO_MATCH_4PCS_BASE_IMPL_</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="preprocessor">#define _SUPER4PCS_ALGO_MATCH_4PCS_BASE_IMPL_</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="preprocessor">#ifndef _SUPER4PCS_ALGO_MATCH_4PCS_BASE_</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="preprocessor">#include &quot;super4pcs/algorithms/match4pcsBase.h&quot;</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="preprocessor">#include &lt;chrono&gt;</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="preprocessor">#include &lt;Eigen/Geometry&gt;</span>                 </div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="preprocessor">#include &lt;Eigen/SVD&gt;</span>                      </div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="keyword">namespace </span><a class="code" href="a04027.xhtml">GlobalRegistration</a>{</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment">// The main 4PCS function. Computes the best rigid transformation and transfoms</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment">// Q toward P by this transformation.</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Sampler, <span class="keyword">typename</span> Visitor&gt;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<a class="code" href="a04648.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">Match4PCSBase::Scalar</a></div><div class="line"><a name="l00062"></a><span class="lineno"><a class="line" href="a04648.xhtml#a75c9ca6da4d064f8484e432b7f795b8c">   62</a></span>&#160;<a class="code" href="a04648.xhtml#a75c9ca6da4d064f8484e432b7f795b8c">Match4PCSBase::ComputeTransformation</a>(<span class="keyword">const</span> std::vector&lt;Point3D&gt;&amp; P,</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;                                     std::vector&lt;Point3D&gt;* Q,</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;                                     Eigen::Ref&lt;MatrixType&gt; transformation,</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;                                     <span class="keyword">const</span> Sampler&amp; sampler,</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;                                     <span class="keyword">const</span> Visitor&amp; v) {</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;  <span class="keywordflow">if</span> (Q == <span class="keyword">nullptr</span>) <span class="keywordflow">return</span> <a class="code" href="a04648.xhtml#ad73c2959940a8cd9db8b9273ac877b94">kLargeNumber</a>;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;  <span class="keywordflow">if</span> (P.empty() || Q-&gt;empty()) <span class="keywordflow">return</span> <a class="code" href="a04648.xhtml#ad73c2959940a8cd9db8b9273ac877b94">kLargeNumber</a>;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;  init(P, *Q, sampler);</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;  <span class="keywordflow">if</span> (best_LCP_ != <a class="code" href="a04648.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">Scalar</a>(1.))</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    Perform_N_steps(number_of_trials_, transformation, Q, v);</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="preprocessor">#ifdef TEST_GLOBAL_TIMINGS</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;  Log&lt;LogLevel::Verbose&gt;( <span class="stringliteral">&quot;----------- Timings (msec) -------------&quot;</span> );</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;  Log&lt;LogLevel::Verbose&gt;( <span class="stringliteral">&quot; Total computation time  : &quot;</span>, totalTime   );</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;  Log&lt;LogLevel::Verbose&gt;( <span class="stringliteral">&quot; Total verify time       : &quot;</span>, verifyTime  );</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;  Log&lt;LogLevel::Verbose&gt;( <span class="stringliteral">&quot;    Kdtree query         : &quot;</span>, kdTreeTime  );</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;  Log&lt;LogLevel::Verbose&gt;( <span class="stringliteral">&quot;----------------------------------------&quot;</span> );</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;  <span class="keywordflow">return</span> best_LCP_;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;}</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Sampler&gt;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="keywordtype">void</span> Match4PCSBase::init(<span class="keyword">const</span> std::vector&lt;Point3D&gt;&amp; P,</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                         <span class="keyword">const</span> std::vector&lt;Point3D&gt;&amp; Q,</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                         <span class="keyword">const</span> Sampler&amp; sampler){</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="preprocessor">#ifdef TEST_GLOBAL_TIMINGS</span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    kdTreeTime = 0;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    totalTime  = 0;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    verifyTime = 0;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="keyword">const</span> <a class="code" href="a04648.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">Scalar</a> kSmallError = 0.00001;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> kMinNumberOfTrials = 4;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keyword">const</span> <a class="code" href="a04648.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">Scalar</a> kDiameterFraction = 0.3;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    centroid_P_ = VectorType::Zero();</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    centroid_Q_ = VectorType::Zero();</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    sampled_P_3D_.clear();</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    sampled_Q_3D_.clear();</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="keywordflow">if</span> (P.size() &gt; options_.<a class="code" href="a04688.xhtml#a08cb2ba24bc880c00cb67d5dd98c3949">sample_size</a>){</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        sampler(P, options_, sampled_P_3D_);</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    }</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    {</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        Log&lt;LogLevel::ErrorReport&gt;( <span class="stringliteral">&quot;(P) More samples requested than available: use whole cloud&quot;</span> );</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        sampled_P_3D_ = P;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    }</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="keywordflow">if</span> (Q.size() &gt; options_.<a class="code" href="a04688.xhtml#a08cb2ba24bc880c00cb67d5dd98c3949">sample_size</a>){</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        std::vector&lt;Point3D&gt; uniform_Q;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        sampler(Q, options_, uniform_Q);</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        std::shuffle(uniform_Q.begin(), uniform_Q.end(), randomGenerator_);</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        <span class="keywordtype">size_t</span> nbSamples = std::min(uniform_Q.size(), options_.<a class="code" href="a04688.xhtml#a08cb2ba24bc880c00cb67d5dd98c3949">sample_size</a>);</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        <span class="keyword">auto</span> endit = uniform_Q.begin(); std::advance(endit, nbSamples );</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        std::copy(uniform_Q.begin(), endit, std::back_inserter(sampled_Q_3D_));</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    }</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    {</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        Log&lt;LogLevel::ErrorReport&gt;( <span class="stringliteral">&quot;(Q) More samples requested than available: use whole cloud&quot;</span> );</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        sampled_Q_3D_ = Q;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    }</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="keyword">auto</span> centerPoints = [](std::vector&lt;Point3D&gt;&amp;container,</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            <a class="code" href="a04648.xhtml#ab770b30d192c7fbb1156382e69d8ba64">VectorType</a>&amp; centroid){</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span>&amp; p : container) centroid += p.pos();</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        centroid /= <a class="code" href="a04648.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">Scalar</a>(container.size());</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">auto</span>&amp; p : container) p.pos() -= centroid;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    };</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    centerPoints(sampled_P_3D_, centroid_P_);</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    centerPoints(sampled_Q_3D_, centroid_Q_);</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    initKdTree();</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    P_diameter_ = 0.0;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="a04648.xhtml#af1338e5d230103c2d8268e3fccdf351c">kNumberOfDiameterTrials</a>; ++i) {</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        <span class="keywordtype">int</span> at = randomGenerator_() % sampled_Q_3D_.size();</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        <span class="keywordtype">int</span> bt = randomGenerator_() % sampled_Q_3D_.size();</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        <a class="code" href="a04648.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">Scalar</a> l = (sampled_Q_3D_[bt].pos() - sampled_Q_3D_[at].pos()).norm();</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        <span class="keywordflow">if</span> (l &gt; P_diameter_) {</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;            P_diameter_ = l;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        }</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    }</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    P_mean_distance_ = MeanDistance();</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    max_base_diameter_ = P_diameter_;  </div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <a class="code" href="a04648.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">Scalar</a> first_estimation =</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            std::log(kSmallError) / std::log(1.0 - pow(options_.<a class="code" href="a04688.xhtml#a91b3ac4a47f82c2c2ff8ecd0bbd43c2b">getOverlapEstimation</a>(),</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                                             <span class="keyword">static_cast&lt;</span><a class="code" href="a04648.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">Scalar</a><span class="keyword">&gt;</span>(kMinNumberOfTrials)));</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    number_of_trials_ =</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;            <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(first_estimation * (P_diameter_ / kDiameterFraction) /</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                             max_base_diameter_);</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <span class="keywordflow">if</span> (number_of_trials_ &lt; kMinNumberOfTrials)</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        number_of_trials_ = kMinNumberOfTrials;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    Log&lt;LogLevel::Verbose&gt;( <span class="stringliteral">&quot;norm_max_dist: &quot;</span>, options_.<a class="code" href="a04688.xhtml#a055cc90b19de7bbac3a925ea04f7ef9e">delta</a> );</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    current_trial_ = 0;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    best_LCP_ = 0.0;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    Q_copy_ = Q;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; 4; ++i) {</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        base_[i] = 0;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        current_congruent_[i] = 0;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    }</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    transform_ = Eigen::Matrix&lt;Scalar, 4, 4&gt;::Identity();</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    Initialize(P, Q);</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    best_LCP_ = Verify(transform_);</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    Log&lt;LogLevel::Verbose&gt;( <span class="stringliteral">&quot;Initial LCP: &quot;</span>, best_LCP_ );</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;}</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="comment">// Performs N RANSAC iterations and compute the best transformation. Also,</span></div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="comment">// transforms the set Q by this optimal transformation.</span></div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Visitor&gt;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="keywordtype">bool</span></div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;Match4PCSBase::Perform_N_steps(<span class="keywordtype">int</span> n,</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                               Eigen::Ref&lt;MatrixType&gt; transformation,</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                               std::vector&lt;Point3D&gt;* Q,</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                               <span class="keyword">const</span> Visitor &amp;v) {</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;  <span class="keyword">using</span> std::chrono::system_clock;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;  <span class="keywordflow">if</span> (Q == <span class="keyword">nullptr</span>) <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="preprocessor">#ifdef TEST_GLOBAL_TIMINGS</span></div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    Timer t (<span class="keyword">true</span>);</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;  <span class="keyword">auto</span> getGlobalTransform = [<span class="keyword">this</span>](Eigen::Ref&lt;MatrixType&gt; transformation){</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    Eigen::Matrix&lt;Scalar, 3, 3&gt; rot, scale;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    Eigen::Transform&lt;Scalar, 3, Eigen::Affine&gt; (transform_).computeRotationScaling(&amp;rot, &amp;scale);</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    transform_.col(3) = (qcentroid1_ + centroid_P_ - ( rot * scale * (qcentroid2_ + centroid_Q_))).homogeneous();</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    transformation = transform_;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;  };</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;  <a class="code" href="a04648.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">Scalar</a> last_best_LCP = best_LCP_;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;  v(0, best_LCP_, transformation);</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;  <span class="keywordtype">bool</span> ok = <span class="keyword">false</span>;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;  std::chrono::time_point&lt;system_clock&gt; t0 = system_clock::now(), end;</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = current_trial_; i &lt; current_trial_ + n; ++i) {</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    ok = TryOneBase();</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <a class="code" href="a04648.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">Scalar</a> fraction_try  = <a class="code" href="a04648.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">Scalar</a>(i) / <a class="code" href="a04648.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">Scalar</a>(number_of_trials_);</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <a class="code" href="a04648.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">Scalar</a> fraction_time =</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        std::chrono::duration_cast&lt;std::chrono::seconds&gt;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        (system_clock::now() - t0).count() /</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                          options_.<a class="code" href="a04688.xhtml#acae5f425d7aaaf0ccd24ca51362c72ee">max_time_seconds</a>;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <a class="code" href="a04648.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">Scalar</a> fraction = std::max(fraction_time, fraction_try);</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <span class="keywordflow">if</span> (v.needsGlobalTransformation()) {</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;      getGlobalTransform(transformation);</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;      transformation = transform_;</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    }</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    v(fraction, best_LCP_, transformation);</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <span class="keywordflow">if</span> (ok || i &gt; number_of_trials_ || fraction &gt;= 0.99 || best_LCP_ == 1.0) <span class="keywordflow">break</span>;</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;  }</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;  current_trial_ += n;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;  <span class="keywordflow">if</span> (best_LCP_ &gt; last_best_LCP) {</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    *Q = Q_copy_;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    getGlobalTransform(transformation);</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; Q-&gt;size(); ++i) {</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;      (*Q)[i].pos() = (transformation * (*Q)[i].pos().homogeneous()).head&lt;3&gt;();</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    }</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;  }</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;<span class="preprocessor">#ifdef TEST_GLOBAL_TIMINGS</span></div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    totalTime += <a class="code" href="a04648.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">Scalar</a>(t.elapsed().count()) / <a class="code" href="a04648.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">Scalar</a>(CLOCKS_PER_SEC);</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;  <span class="keywordflow">return</span> ok || current_trial_ &gt;= number_of_trials_;</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;}</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;} </div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;<span class="preprocessor">#endif</span></div><div class="ttc" id="a04688_xhtml_a91b3ac4a47f82c2c2ff8ecd0bbd43c2b"><div class="ttname"><a href="a04688.xhtml#a91b3ac4a47f82c2c2ff8ecd0bbd43c2b">GlobalRegistration::Match4PCSOptions::getOverlapEstimation</a></div><div class="ttdeci">Scalar getOverlapEstimation() const</div><div class="ttdef"><b>Definition:</b> shared4pcs.h:181</div></div>
<div class="ttc" id="a04648_xhtml_ab770b30d192c7fbb1156382e69d8ba64"><div class="ttname"><a href="a04648.xhtml#ab770b30d192c7fbb1156382e69d8ba64">GlobalRegistration::Match4PCSBase::VectorType</a></div><div class="ttdeci">typename Point3D::VectorType VectorType</div><div class="ttdef"><b>Definition:</b> match4pcsBase.h:66</div></div>
<div class="ttc" id="a04027_xhtml"><div class="ttname"><a href="a04027.xhtml">GlobalRegistration</a></div><div class="ttdoc">MatrixBase.homogeneous() Transform.computeRotationScaling() </div><div class="ttdef"><b>Definition:</b> bbox.h:54</div></div>
<div class="ttc" id="a04688_xhtml_acae5f425d7aaaf0ccd24ca51362c72ee"><div class="ttname"><a href="a04688.xhtml#acae5f425d7aaaf0ccd24ca51362c72ee">GlobalRegistration::Match4PCSOptions::max_time_seconds</a></div><div class="ttdeci">int max_time_seconds</div><div class="ttdoc">Maximum time we allow the computation to take. This makes the algorithm an ANY TIME algorithm that ca...</div><div class="ttdef"><b>Definition:</b> shared4pcs.h:170</div></div>
<div class="ttc" id="a04648_xhtml_ad73c2959940a8cd9db8b9273ac877b94"><div class="ttname"><a href="a04648.xhtml#ad73c2959940a8cd9db8b9273ac877b94">GlobalRegistration::Match4PCSBase::kLargeNumber</a></div><div class="ttdeci">static constexpr Scalar kLargeNumber</div><div class="ttdef"><b>Definition:</b> match4pcsBase.h:76</div></div>
<div class="ttc" id="a04648_xhtml_aa5728ef38ba5d5d64611ffd7926198f2"><div class="ttname"><a href="a04648.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">GlobalRegistration::Match4PCSBase::Scalar</a></div><div class="ttdeci">typename Point3D::Scalar Scalar</div><div class="ttdef"><b>Definition:</b> match4pcsBase.h:65</div></div>
<div class="ttc" id="a04648_xhtml_af1338e5d230103c2d8268e3fccdf351c"><div class="ttname"><a href="a04648.xhtml#af1338e5d230103c2d8268e3fccdf351c">GlobalRegistration::Match4PCSBase::kNumberOfDiameterTrials</a></div><div class="ttdeci">static constexpr int kNumberOfDiameterTrials</div><div class="ttdef"><b>Definition:</b> match4pcsBase.h:75</div></div>
<div class="ttc" id="a04688_xhtml_a08cb2ba24bc880c00cb67d5dd98c3949"><div class="ttname"><a href="a04688.xhtml#a08cb2ba24bc880c00cb67d5dd98c3949">GlobalRegistration::Match4PCSOptions::sample_size</a></div><div class="ttdeci">size_t sample_size</div><div class="ttdoc">The number of points in the sample. We sample this number of points uniformly from P and Q...</div><div class="ttdef"><b>Definition:</b> shared4pcs.h:166</div></div>
<div class="ttc" id="a04688_xhtml_a055cc90b19de7bbac3a925ea04f7ef9e"><div class="ttname"><a href="a04688.xhtml#a055cc90b19de7bbac3a925ea04f7ef9e">GlobalRegistration::Match4PCSOptions::delta</a></div><div class="ttdeci">Scalar delta</div><div class="ttdoc">The delta for the LCP (see the paper). </div><div class="ttdef"><b>Definition:</b> shared4pcs.h:154</div></div>
<div class="ttc" id="a04648_xhtml_a75c9ca6da4d064f8484e432b7f795b8c"><div class="ttname"><a href="a04648.xhtml#a75c9ca6da4d064f8484e432b7f795b8c">GlobalRegistration::Match4PCSBase::ComputeTransformation</a></div><div class="ttdeci">Scalar ComputeTransformation(const std::vector&lt; Point3D &gt; &amp;P, std::vector&lt; Point3D &gt; *Q, Eigen::Ref&lt; MatrixType &gt; transformation, const Sampler &amp;sampler=Sampler(), const Visitor &amp;v=Visitor())</div><div class="ttdoc">Computes an approximation of the best LCP (directional) from Q to P and the rigid transformation that...</div><div class="ttdef"><b>Definition:</b> match4pcsBase.hpp:62</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_baa1401c71900ec02cbb70ce291537c5.xhtml">Super4PCS</a></li><li class="navelem"><a class="el" href="dir_3989a8448b4f6c51ba272a624fc2375b.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_6682cd8b4640db55889f553521d7d93d.xhtml">super4pcs</a></li><li class="navelem"><a class="el" href="dir_3690401dc38fd427f68cbc81d6adf091.xhtml">algorithms</a></li><li class="navelem"><b>match4pcsBase.hpp</b></li>
    <li class="footer">Generated on Tue Sep 19 2017 10:16:06 for Super4PCS Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
