<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Super4PCS Library: /export/home/cezanne/nmellado/git/Super4PCS/src/super4pcs/algorithms/match4pcsBase.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js", "TeX/AMSsymbols.js", "TeX/AMSmath.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Super4PCS Library
   &#160;<span id="projectnumber">V1.1.2(996102d)</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_baa1401c71900ec02cbb70ce291537c5.xhtml">Super4PCS</a></li><li class="navelem"><a class="el" href="dir_3989a8448b4f6c51ba272a624fc2375b.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_6682cd8b4640db55889f553521d7d93d.xhtml">super4pcs</a></li><li class="navelem"><a class="el" href="dir_3690401dc38fd427f68cbc81d6adf091.xhtml">algorithms</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">match4pcsBase.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">// Copyright 2017 Nicolas Mellado</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">// you may not use this file except in compliance with the License.</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">// You may obtain a copy of the License at</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">//   http://www.apache.org/licenses/LICENSE-2.0</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">// Unless required by applicable law or agreed to in writing, software</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">// distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">// See the License for the specific language governing permissions and</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">// limitations under the License.</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">// -------------------------------------------------------------------------- //</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">// Authors: Dror Aiger, Yoni Weill, Nicolas Mellado</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">// This file is part of the implementation of the 4-points Congruent Sets (4PCS)</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment">// algorithm presented in:</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment">// 4-points Congruent Sets for Robust Surface Registration</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">// Dror Aiger, Niloy J. Mitra, Daniel Cohen-Or</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment">// ACM SIGGRAPH 2008 and ACM Transaction of Graphics.</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment">// Given two sets of points in 3-space, P and Q, the algorithm applies RANSAC</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="comment">// in roughly O(n^2) time instead of O(n^3) for standard RANSAC, using an</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="comment">// efficient method based on invariants, to find the set of all 4-points in Q</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment">// that can be matched by rigid transformation to a given set of 4-points in P</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment">// called a base. This avoids the need to examine all sets of 3-points in Q</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment">// against any base of 3-points in P as in standard RANSAC.</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="comment">// The algorithm can use colors and normals to speed-up the matching</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="comment">// and to improve the quality. It can be easily extended to affine/similarity</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="comment">// transformation but then the speed-up is smaller because of the large number</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment">// of congruent sets. The algorithm can also limit the range of transformations</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment">// when the application knows something on the initial pose but this is not</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">// necessary in general (though can speed the runtime significantly).</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment">// Home page of the 4PCS project (containing the paper, presentations and a</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment">// demo): http://graphics.stanford.edu/~niloy/research/fpcs/fpcs_sig_08.html</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment">// Use google search on &quot;4-points congruent sets&quot; to see many related papers</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment">// and applications.</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="preprocessor">#ifndef _SUPER4PCS_ALGO_MATCH_4PCS_BASE_</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="preprocessor">#define _SUPER4PCS_ALGO_MATCH_4PCS_BASE_</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="preprocessor">#include &quot;super4pcs/shared4pcs.h&quot;</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="preprocessor">#include &quot;super4pcs/sampling.h&quot;</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="preprocessor">#include &quot;super4pcs/accelerators/kdtree.h&quot;</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="preprocessor">#include &quot;super4pcs/utils/logger.h&quot;</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="preprocessor">#ifdef TEST_GLOBAL_TIMINGS</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="preprocessor">#   include &quot;super4pcs/utils/timer.h&quot;</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespace_global_registration.xhtml">GlobalRegistration</a>{</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno"><a class="line" href="class_global_registration_1_1_match4_p_c_s_base.xhtml">   61</a></span>&#160;<span class="keyword">class </span><a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml">Match4PCSBase</a> {</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00064"></a><span class="lineno"><a class="line" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a2c158e8371931d9d9f2be64e8a6213c6">   64</a></span>&#160;    <span class="keyword">using</span> <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a2c158e8371931d9d9f2be64e8a6213c6">PairsVector</a> =  std::vector&lt; std::pair&lt;int, int&gt; &gt;;</div><div class="line"><a name="l00065"></a><span class="lineno"><a class="line" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">   65</a></span>&#160;    <span class="keyword">using</span> <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">Scalar</a> = <span class="keyword">typename</span> <a class="code" href="class_global_registration_1_1_point3_d.xhtml#a7d4adee318864f86e62a22a4168061bb">Point3D::Scalar</a>;</div><div class="line"><a name="l00066"></a><span class="lineno"><a class="line" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#ab770b30d192c7fbb1156382e69d8ba64">   66</a></span>&#160;    <span class="keyword">using</span> <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#ab770b30d192c7fbb1156382e69d8ba64">VectorType</a> = <span class="keyword">typename</span> <a class="code" href="class_global_registration_1_1_point3_d.xhtml#a6dc8c7d110e5f0ccf1098b75702e8d83">Point3D::VectorType</a>;</div><div class="line"><a name="l00067"></a><span class="lineno"><a class="line" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a60395ea978ada7861d82d6e0bcbdd47a">   67</a></span>&#160;    <span class="keyword">using</span> <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a60395ea978ada7861d82d6e0bcbdd47a">MatrixType</a> = Eigen::Matrix&lt;Scalar, 4, 4&gt;;</div><div class="line"><a name="l00068"></a><span class="lineno"><a class="line" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a92bd739d292e1469a2295540747b1671">   68</a></span>&#160;    <span class="keyword">using</span> <a class="code" href="namespace_global_registration_1_1_utils.xhtml#aca8aed96f103991f3cc1cb3f3d5ed34a">LogLevel</a> = <a class="code" href="namespace_global_registration_1_1_utils.xhtml#aca8aed96f103991f3cc1cb3f3d5ed34a">Utils::LogLevel</a>;</div><div class="line"><a name="l00069"></a><span class="lineno"><a class="line" href="struct_global_registration_1_1_match4_p_c_s_base_1_1_dummy_transform_visitor.xhtml">   69</a></span>&#160;    <span class="keyword">struct </span><a class="code" href="struct_global_registration_1_1_match4_p_c_s_base_1_1_dummy_transform_visitor.xhtml">DummyTransformVisitor</a> {</div><div class="line"><a name="l00070"></a><span class="lineno"><a class="line" href="struct_global_registration_1_1_match4_p_c_s_base_1_1_dummy_transform_visitor.xhtml#a62594155cdbf0f195df9ad3ec3c5fccc">   70</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="struct_global_registration_1_1_match4_p_c_s_base_1_1_dummy_transform_visitor.xhtml#a62594155cdbf0f195df9ad3ec3c5fccc">operator() </a>(<span class="keywordtype">float</span>, <span class="keywordtype">float</span>, Eigen::Ref&lt;Match4PCSBase::MatrixType&gt;)<span class="keyword"> const </span>{}</div><div class="line"><a name="l00071"></a><span class="lineno"><a class="line" href="struct_global_registration_1_1_match4_p_c_s_base_1_1_dummy_transform_visitor.xhtml#a21be8f78f44b2177d39d4cd987685de3">   71</a></span>&#160;        constexpr <span class="keywordtype">bool</span> <a class="code" href="struct_global_registration_1_1_match4_p_c_s_base_1_1_dummy_transform_visitor.xhtml#a21be8f78f44b2177d39d4cd987685de3">needsGlobalTransformation</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <span class="keyword">false</span>; }</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    };</div><div class="line"><a name="l00073"></a><span class="lineno"><a class="line" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#aa53647c24830f95a58a8ba3c857b6378">   73</a></span>&#160;    <span class="keyword">using</span> <a class="code" href="struct_global_registration_1_1_sampling_1_1_uniform_dist_sampler.xhtml">DefaultSampler</a> = <a class="code" href="struct_global_registration_1_1_sampling_1_1_uniform_dist_sampler.xhtml">Sampling::UniformDistSampler</a>;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno"><a class="line" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#af1338e5d230103c2d8268e3fccdf351c">   75</a></span>&#160;    <span class="keyword">static</span> constexpr <span class="keywordtype">int</span> <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#af1338e5d230103c2d8268e3fccdf351c">kNumberOfDiameterTrials</a> = 1000;</div><div class="line"><a name="l00076"></a><span class="lineno"><a class="line" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#ad73c2959940a8cd9db8b9273ac877b94">   76</a></span>&#160;    <span class="keyword">static</span> constexpr <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">Scalar</a> <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#ad73c2959940a8cd9db8b9273ac877b94">kLargeNumber</a> = 1e9;</div><div class="line"><a name="l00077"></a><span class="lineno"><a class="line" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a9d1ce6ba9087e5624424871a4c0750a3">   77</a></span>&#160;    <span class="keyword">static</span> constexpr <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">Scalar</a> <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a9d1ce6ba9087e5624424871a4c0750a3">distance_factor</a> = 2.0;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keyword">virtual</span> <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a9201f2939d9d1359a1621be82367d886">~Match4PCSBase</a>();</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="comment">// Read access to the sampled clouds used for the registration</span></div><div class="line"><a name="l00082"></a><span class="lineno"><a class="line" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a414d078256fc522cb1061e7a1dd9c749">   82</a></span>&#160;    <span class="keyword">inline</span> <span class="keyword">const</span> std::vector&lt;Point3D&gt;&amp; <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a414d078256fc522cb1061e7a1dd9c749">getFirstSampled</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a69f1578bc6610579eb266824abb26582">sampled_P_3D_</a>;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    }</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="comment">// Read access to the sampled clouds used for the registration</span></div><div class="line"><a name="l00087"></a><span class="lineno"><a class="line" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#ad965fe63c333bf38ed444172ab35eb08">   87</a></span>&#160;    <span class="keyword">inline</span> <span class="keyword">const</span> std::vector&lt;Point3D&gt;&amp; <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#ad965fe63c333bf38ed444172ab35eb08">getSecondSampled</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#ab7578fd1e68ccad0ce00bbf4e554248e">sampled_Q_3D_</a>;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    }</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="comment">// Computes an approximation of the best LCP (directional) from Q to P</span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="comment">// and the rigid transformation that realizes it. The input sets may or may</span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="comment">// not contain normal information for any point.</span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="comment">// @param [in] P The first input set.</span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="comment">// @param [in] Q The second input set.</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="comment">// as a fraction of the size of P ([0..1]).</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="comment">// @param [out] transformation Rigid transformation matrix (4x4) that brings</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="comment">// Q to the (approximate) optimal LCP. Initial value is considered as a guess</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="comment">// @return the computed LCP measure.</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="comment">// The method updates the coordinates of the second set, Q, applying</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="comment">// the found transformation.</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Sampler = <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#aa53647c24830f95a58a8ba3c857b6378">DefaultSampler</a>,</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;              <span class="keyword">typename</span> Visitor = <a class="code" href="struct_global_registration_1_1_match4_p_c_s_base_1_1_dummy_transform_visitor.xhtml">DummyTransformVisitor</a>&gt;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">Scalar</a></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a75c9ca6da4d064f8484e432b7f795b8c">ComputeTransformation</a>(<span class="keyword">const</span> std::vector&lt;Point3D&gt;&amp; P,</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                          std::vector&lt;Point3D&gt;* Q,</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                          Eigen::Ref&lt;MatrixType&gt; transformation,</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                          <span class="keyword">const</span> Sampler&amp; sampler = Sampler(),</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                          <span class="keyword">const</span> Visitor&amp; v = Visitor());</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="keyword">protected</span>:</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="comment">// Number of trials. Every trial picks random base from P.</span></div><div class="line"><a name="l00114"></a><span class="lineno"><a class="line" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a2bfa167883262fea0ec468ddea97a9de">  114</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a2bfa167883262fea0ec468ddea97a9de">number_of_trials_</a>;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="comment">// Maximum base diameter. It is computed automatically from the diameter of</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="comment">// P and the estimated overlap and used to limit the distance between the</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="comment">// points in the base in P so that the probability to have all points in</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="comment">// the base as inliers is increased.</span></div><div class="line"><a name="l00119"></a><span class="lineno"><a class="line" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a488623aecb96323142b2e31a8e0f2f71">  119</a></span>&#160;    <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">Scalar</a> <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a488623aecb96323142b2e31a8e0f2f71">max_base_diameter_</a>;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="comment">// The diameter of P.</span></div><div class="line"><a name="l00121"></a><span class="lineno"><a class="line" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a08fe258be1178c7ae214ccf0fa1ff27e">  121</a></span>&#160;    <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">Scalar</a> <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a08fe258be1178c7ae214ccf0fa1ff27e">P_diameter_</a>;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="comment">// Mean distance between points and their nearest neighbor in the set P.</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="comment">// Used to normalize the &quot;delta&quot; which is given in terms of this distance.</span></div><div class="line"><a name="l00124"></a><span class="lineno"><a class="line" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a3510115515ab8b6fecf0d1a66fae1959">  124</a></span>&#160;    <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">Scalar</a> <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a3510115515ab8b6fecf0d1a66fae1959">P_mean_distance_</a>;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="comment">// The centroid about which we rotate a congruent set in Q to match the base</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="comment">// in P. It is used temporarily and makes the transformations more robust to</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="comment">// noise. At the end, the direct transformation applied as a 4x4 matrix on</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="comment">// every points in Q is computed and returned.</span></div><div class="line"><a name="l00129"></a><span class="lineno"><a class="line" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a509b4769237a09794b71c91101484687">  129</a></span>&#160;    <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#ab770b30d192c7fbb1156382e69d8ba64">VectorType</a> <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a509b4769237a09794b71c91101484687">centroid_</a>;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="comment">// The transformation matrix by wich we transform Q to P</span></div><div class="line"><a name="l00131"></a><span class="lineno"><a class="line" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a33839e739282bddc8523cc1a7410195b">  131</a></span>&#160;    Eigen::Matrix&lt;Scalar, 4, 4&gt; <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a33839e739282bddc8523cc1a7410195b">transform_</a>;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <span class="comment">// Quad centroids in first and second clouds</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <span class="comment">// They are used temporarily and makes the transformations more robust to</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="comment">// noise. At the end, the direct transformation applied as a 4x4 matrix on</span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="comment">// every points in Q is computed and returned.</span></div><div class="line"><a name="l00136"></a><span class="lineno"><a class="line" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a6a35e3e2717fd5577364cfc64a2054f0">  136</a></span>&#160;    Eigen::Matrix&lt;Scalar, 3, 1&gt; <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a0d3cd539491e61af71eb21e476db9539">qcentroid1_</a>, <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a6a35e3e2717fd5577364cfc64a2054f0">qcentroid2_</a>;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="comment">// The points in the base (indices to P). It is being updated in every</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="comment">// RANSAC iteration.</span></div><div class="line"><a name="l00139"></a><span class="lineno"><a class="line" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a7d9cd2d589b9ebe5bf1793ede66f942b">  139</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a7d9cd2d589b9ebe5bf1793ede66f942b">base_</a>[4];</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="comment">// The current congruent 4 points from Q. Every RANSAC iteration the</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="comment">// algorithm examines a set of such congruent 4-points from Q and retains</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <span class="comment">// the best from them (the one that realizes the best LCP).</span></div><div class="line"><a name="l00143"></a><span class="lineno"><a class="line" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a7a836ae299795e818b1d39dfb47c43cd">  143</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a7a836ae299795e818b1d39dfb47c43cd">current_congruent_</a>[4];</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="comment">// Sampled P (3D coordinates).</span></div><div class="line"><a name="l00145"></a><span class="lineno"><a class="line" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a69f1578bc6610579eb266824abb26582">  145</a></span>&#160;    std::vector&lt;Point3D&gt; <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a69f1578bc6610579eb266824abb26582">sampled_P_3D_</a>;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="comment">// Sampled Q (3D coordinates).</span></div><div class="line"><a name="l00147"></a><span class="lineno"><a class="line" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#ab7578fd1e68ccad0ce00bbf4e554248e">  147</a></span>&#160;    std::vector&lt;Point3D&gt; <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#ab7578fd1e68ccad0ce00bbf4e554248e">sampled_Q_3D_</a>;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="comment">// The 3D points of the base.</span></div><div class="line"><a name="l00149"></a><span class="lineno"><a class="line" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a2b5182761990ae10bee0140b32de3018">  149</a></span>&#160;    std::vector&lt;Point3D&gt; <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a2b5182761990ae10bee0140b32de3018">base_3D_</a>;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="comment">// The copy of the input Q. We transform Q to match P and returned the</span></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <span class="comment">// transformed version.</span></div><div class="line"><a name="l00152"></a><span class="lineno"><a class="line" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#ac96a4c4515685355719c55ca8681b03a">  152</a></span>&#160;    std::vector&lt;Point3D&gt; <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#ac96a4c4515685355719c55ca8681b03a">Q_copy_</a>;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="comment">// The centroid of P.</span></div><div class="line"><a name="l00154"></a><span class="lineno"><a class="line" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a48e216dcb45b4f5a337c448ee0c519e5">  154</a></span>&#160;    <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#ab770b30d192c7fbb1156382e69d8ba64">VectorType</a> <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a48e216dcb45b4f5a337c448ee0c519e5">centroid_P_</a>;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <span class="comment">// The centroid of Q.</span></div><div class="line"><a name="l00156"></a><span class="lineno"><a class="line" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a5167aafa6c5d072884999fce4076a9e1">  156</a></span>&#160;    <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#ab770b30d192c7fbb1156382e69d8ba64">VectorType</a> <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a5167aafa6c5d072884999fce4076a9e1">centroid_Q_</a>;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="comment">// The best LCP (Largest Common Point) fraction so far.</span></div><div class="line"><a name="l00158"></a><span class="lineno"><a class="line" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a9b1d96361ae9628f04a7faef65f84735">  158</a></span>&#160;    <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">Scalar</a> <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a9b1d96361ae9628f04a7faef65f84735">best_LCP_</a>;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <span class="comment">// Current trial.</span></div><div class="line"><a name="l00160"></a><span class="lineno"><a class="line" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#ace9c9b9614ee84b3473d8bfc6a9c261a">  160</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#ace9c9b9614ee84b3473d8bfc6a9c261a">current_trial_</a>;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <span class="comment">// KdTree used to compute the LCP</span></div><div class="line"><a name="l00162"></a><span class="lineno"><a class="line" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a60e9fb29c45fa5f1ce8c31a5055becca">  162</a></span>&#160;    <a class="code" href="class_global_registration_1_1_kd_tree.xhtml">KdTree&lt;Scalar&gt;</a> <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a60e9fb29c45fa5f1ce8c31a5055becca">kd_tree_</a>;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="comment">// Parameters.</span></div><div class="line"><a name="l00164"></a><span class="lineno"><a class="line" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#ae42fcca074895cbefc1c50723bff465b">  164</a></span>&#160;    <span class="keyword">const</span> <a class="code" href="struct_global_registration_1_1_match4_p_c_s_options.xhtml">Match4PCSOptions</a> <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#ae42fcca074895cbefc1c50723bff465b">options_</a>;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div><div class="line"><a name="l00166"></a><span class="lineno"><a class="line" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a0c15b30e15df63f9ffab80fdda42cb84">  166</a></span>&#160;    std::mt19937 <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a0c15b30e15df63f9ffab80fdda42cb84">randomGenerator_</a>;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div><div class="line"><a name="l00168"></a><span class="lineno"><a class="line" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a5ccea1d074d5061123f2e6afd0a57648">  168</a></span>&#160;    <span class="keyword">const</span> <a class="code" href="class_global_registration_1_1_utils_1_1_logger.xhtml">Utils::Logger</a> &amp;<a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a5ccea1d074d5061123f2e6afd0a57648">logger_</a>;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="preprocessor">#ifdef TEST_GLOBAL_TIMINGS</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">Scalar</a> totalTime;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">Scalar</a> kdTreeTime;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">Scalar</a> verifyTime;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <span class="keyword">using</span> Timer = <a class="code" href="class_global_registration_1_1_utils_1_1_timer.xhtml">GlobalRegistration::Utils::Timer</a>;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="keyword">protected</span>:</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#acba41e3c13ed475b3dac6448be654cd6">Match4PCSBase</a>(<span class="keyword">const</span> <a class="code" href="struct_global_registration_1_1_match4_p_c_s_options.xhtml">Match4PCSOptions</a>&amp; options, <span class="keyword">const</span> <a class="code" href="class_global_registration_1_1_utils_1_1_logger.xhtml">Utils::Logger</a> &amp;logger );</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <span class="keyword">template</span> &lt;<a class="code" href="namespace_global_registration_1_1_utils.xhtml#aca8aed96f103991f3cc1cb3f3d5ed34a">Utils::LogLevel</a> level, <span class="keyword">typename</span>...Args&gt;</div><div class="line"><a name="l00185"></a><span class="lineno"><a class="line" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a8e8c05b6f4156e85f6239f5f06537516">  185</a></span>&#160;    <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a8e8c05b6f4156e85f6239f5f06537516">Log</a>(Args...args)<span class="keyword"> const </span>{ logger_.<a class="code" href="class_global_registration_1_1_utils_1_1_logger.xhtml#a80be1cf2fd1833a5062f0699e40fc396">Log</a>&lt;level&gt;(args...); }</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <span class="comment">// Computes the mean distance between points in Q and their nearest neighbor.</span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <span class="comment">// We need this for normalization of the user delta (See the paper) to the</span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <span class="comment">// &quot;scale&quot; of the set.</span></div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">Scalar</a> <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a63d5f8d1043f6993c0bc3f14291e04b6">MeanDistance</a>();</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <span class="comment">// Selects a random triangle in the set P (then we add another point to keep the</span></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <span class="comment">// base as planar as possible). We apply a simple heuristic that works in most</span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <span class="comment">// practical cases. The idea is to accept maximum distance, computed by the</span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <span class="comment">// estimated overlap, multiplied by the diameter of P, and try to have</span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <span class="comment">// a triangle with all three edges close to this distance. Wide triangles helps</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <span class="comment">// to make the transformation robust while too large triangles makes the</span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <span class="comment">// probability of having all points in the inliers small so we try to trade-off.</span></div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#af9b9a0034ec3ff9646b36ce6250702cd">SelectRandomTriangle</a>(<span class="keywordtype">int</span>&amp; base1, <span class="keywordtype">int</span>&amp; base2, <span class="keywordtype">int</span>&amp; base3);</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="comment">// Takes quadrilateral as a base, computes robust intersection point</span></div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="comment">// (approximate as the lines might not intersect) and returns the invariants</span></div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    <span class="comment">// corresponding to the two selected lines. The method also updates the order</span></div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    <span class="comment">// of the base base_3D_.</span></div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a423c63bc1aece6379b9b6a8cf9d5aa0f">TryQuadrilateral</a>(<a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">Scalar</a> &amp;invariant1, <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">Scalar</a> &amp;invariant2,</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                          <span class="keywordtype">int</span> &amp;base1, <span class="keywordtype">int</span> &amp;base2, <span class="keywordtype">int</span> &amp;base3, <span class="keywordtype">int</span> &amp;base4);</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <span class="comment">// Computes the best rigid transformation between three corresponding pairs.</span></div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    <span class="comment">// The transformation is characterized by rotation matrix, translation vector</span></div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <span class="comment">// and a center about which we rotate. The set of pairs is potentially being</span></div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <span class="comment">// updated by the best permutation of the second set. Returns the RMS of the</span></div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <span class="comment">// fit. The method is being called with 4 points but it applies the fit for</span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <span class="comment">// only 3 after the best permutation is selected in the second set (see</span></div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    <span class="comment">// bellow). This is done because the solution for planar points is much</span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <span class="comment">// simpler.</span></div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="comment">// The method is the closed-form solution by Horn:</span></div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    <span class="comment">// people.csail.mit.edu/bkph/papers/Absolute_Orientation.pdf</span></div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#af4249983ba17f93c48ba4f4d83442511">ComputeRigidTransformation</a>(<span class="keyword">const</span> std::array&lt; std::pair&lt;Point3D, Point3D&gt;,4 &gt;&amp; pairs,</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                                    <span class="keyword">const</span> Eigen::Matrix&lt;Scalar, 3, 1&gt;&amp; centroid1,</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                                    Eigen::Matrix&lt;Scalar, 3, 1&gt; centroid2,</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                                    <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">Scalar</a> max_angle,</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                                    Eigen::Ref&lt;MatrixType&gt; transform,</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                                    <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">Scalar</a>&amp; rms_,</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                                    <span class="keywordtype">bool</span> computeScale );</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <span class="comment">// For each randomly picked base, verifies the computed transformation by</span></div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <span class="comment">// computing the number of points that this transformation brings near points</span></div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <span class="comment">// in Q. Returns the current LCP. R is the rotation matrix, (tx,ty,tz) is</span></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <span class="comment">// the translation vector and (cx,cy,cz) is the center of transformation.template &lt;class MatrixDerived&gt;</span></div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">Scalar</a> <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#ac9a328320c7729722e3a4b9234f2dadf">Verify</a>(<span class="keyword">const</span> Eigen::Ref&lt;const MatrixType&gt; &amp; mat);</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <span class="comment">// Performs n RANSAC iterations, each one of them containing base selection,</span></div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    <span class="comment">// finding congruent sets and verification. Returns true if the process can be</span></div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    <span class="comment">// terminated (the target LCP was obtained or the maximum number of trials has</span></div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <span class="comment">// been reached), false otherwise.</span></div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Visitor&gt;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#afd714116c6898bc5913a9d77eca865ff">Perform_N_steps</a>(<span class="keywordtype">int</span> n,</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                         Eigen::Ref&lt;MatrixType&gt; transformation,</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                         std::vector&lt;Point3D&gt;* Q,</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                         <span class="keyword">const</span> Visitor&amp; v);</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <span class="comment">// Tries one base and finds the best transformation for this base.</span></div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    <span class="comment">// Returns true if the achieved LCP is greater than terminate_threshold_,</span></div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    <span class="comment">// else otherwise.</span></div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#adcacd57bf5844d8205a7620c72c0d450">TryOneBase</a>();</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <span class="comment">// Initializes the data structures and needed values before the match</span></div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <span class="comment">// computation.</span></div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    <span class="comment">// @param [in] point_P First input set.</span></div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <span class="comment">// @param [in] point_Q Second input set.</span></div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <span class="comment">// expected to be in the inliers.</span></div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <span class="comment">// This method is called once the internal state of the Base class as been</span></div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    <span class="comment">// set.</span></div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span></div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#adac9aa457425985cf778c69c60fecc21">Initialize</a>(<span class="keyword">const</span> std::vector&lt;Point3D&gt;&amp; P,</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;               <span class="keyword">const</span> std::vector&lt;Point3D&gt;&amp; Q) = 0;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Sampler&gt;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a6da7132684e7b8285711303d136aed79">init</a>(<span class="keyword">const</span> std::vector&lt;Point3D&gt;&amp; P,</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;              <span class="keyword">const</span> std::vector&lt;Point3D&gt;&amp; Q,</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;              <span class="keyword">const</span> Sampler&amp; sampler);</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    <span class="comment">// Selects a quadrilateral from P and returns the corresponding invariants</span></div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    <span class="comment">// and point indices. Returns true if a quadrilateral has been found, false</span></div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    <span class="comment">// otherwise.</span></div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a3b37709e1bda55f4d109c9a2dbd7b170">SelectQuadrilateral</a>(<a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">Scalar</a> &amp;invariant1, <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">Scalar</a> &amp;invariant2,</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;                             <span class="keywordtype">int</span>&amp; base1, <span class="keywordtype">int</span>&amp; base2, <span class="keywordtype">int</span>&amp; base3, <span class="keywordtype">int</span>&amp; base4);</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;</div><div class="line"><a name="l00272"></a><span class="lineno"><a class="line" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a995d1bd4cc26b4bf799222698e18a78c">  272</a></span>&#160;    <span class="keyword">const</span> std::vector&lt;Point3D&gt;&amp; <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a995d1bd4cc26b4bf799222698e18a78c">base3D</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a2b5182761990ae10bee0140b32de3018">base_3D_</a>; }</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    <span class="comment">// Constructs pairs of points in Q, corresponding to a single pair in the</span></div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    <span class="comment">// in basein P.</span></div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    <span class="comment">// @param [in] pair_distance The distance between the pairs in P that we have</span></div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    <span class="comment">// to match in the pairs we select from Q.</span></div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    <span class="comment">// @param [in] pair_normal_distance The angle between the normals of the pair</span></div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    <span class="comment">// in P.</span></div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    <span class="comment">// @param [in] pair_distance_epsilon Tolerance on the pair distance. We allow</span></div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    <span class="comment">// candidate pair in Q to have distance of</span></div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    <span class="comment">// pair_distance+-pair_distance_epsilon.</span></div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    <span class="comment">// @param [in] base_point1 The index of the first point in P.</span></div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    <span class="comment">// @param [in] base_point2 The index of the second point in P.</span></div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    <span class="comment">// @param [out] pairs A set of pairs in Q that match the pair in P with</span></div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    <span class="comment">// respect to distance and normals, up to the given tolerance.</span></div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span></div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a869c21b7c49110f7301e78d64d9e0e57">ExtractPairs</a>( <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">Scalar</a> pair_distance,</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                  <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">Scalar</a> pair_normals_angle,</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                  <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">Scalar</a> pair_distance_epsilon, <span class="keywordtype">int</span> base_point1,</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;                  <span class="keywordtype">int</span> base_point2,</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                  <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a2c158e8371931d9d9f2be64e8a6213c6">PairsVector</a>* pairs) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    <span class="comment">// Finds congruent candidates in the set Q, given the invariants and threshold</span></div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    <span class="comment">// distances. Returns true if a non empty set can be found, false otherwise.</span></div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    <span class="comment">// @param invariant1 [in] The first invariant corresponding to the set P_pairs</span></div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    <span class="comment">// of pairs, previously extracted from Q.</span></div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    <span class="comment">// @param invariant2 [in] The second invariant corresponding to the set</span></div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    <span class="comment">// Q_pairs of pairs, previously extracted from Q.</span></div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    <span class="comment">// @param [in] distance_threshold1 The distance for verification.</span></div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    <span class="comment">// @param [in] distance_threshold2 The distance for matching middle points due</span></div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    <span class="comment">// to the invariants (See the paper for e1, e2).</span></div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    <span class="comment">// @param [in] P_pairs The first set of pairs.</span></div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    <span class="comment">// @param [in] Q_pairs The second set of pairs.</span></div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    <span class="comment">// @param [out] quadrilaterals The set of congruent quadrilateral. In fact,</span></div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    <span class="comment">// it&#39;s a super set from which we extract the real congruent set.</span></div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span></div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#ae197b4fe78911f96d3732d5faf0a6901">FindCongruentQuadrilaterals</a>(<a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">Scalar</a> invariant1, <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">Scalar</a> invariant2,</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;                                <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">Scalar</a> distance_threshold1,</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;                                <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">Scalar</a> distance_threshold2,</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;                                <span class="keyword">const</span> <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a2c158e8371931d9d9f2be64e8a6213c6">PairsVector</a>&amp; P_pairs,</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;                                <span class="keyword">const</span> <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a2c158e8371931d9d9f2be64e8a6213c6">PairsVector</a>&amp; Q_pairs,</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;                                std::vector&lt;Quadrilateral&gt;* quadrilaterals) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    <span class="comment">// Loop over the set of congruent 4-points and test compatiliby with the</span></div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    <span class="comment">// input base.</span></div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    <span class="comment">// \param [out] Nb Number of quads corresponding to valid configurations</span></div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="class_global_registration_1_1_match4_p_c_s_base.xhtml#acecb2de1f163aff07803ebf905ab3e36">TryCongruentSet</a>(<span class="keywordtype">int</span> base_id1,</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;                         <span class="keywordtype">int</span> base_id2,</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;                         <span class="keywordtype">int</span> base_id3,</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;                         <span class="keywordtype">int</span> base_id4,</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;                         <span class="keyword">const</span> std::vector&lt;Quadrilateral&gt; &amp;congruent_quads,</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;                         <span class="keywordtype">size_t</span> &amp;nbCongruent);</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    <span class="keywordtype">void</span> initKdTree();</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;}; <span class="comment">// class Match4PCSBase</span></div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;} <span class="comment">// namespace Super4PCS</span></div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;<span class="preprocessor">#include &quot;super4pcs/algorithms/match4pcsBase.hpp&quot;</span></div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;<span class="preprocessor">#endif</span></div><div class="ttc" id="class_global_registration_1_1_match4_p_c_s_base_xhtml_a2b5182761990ae10bee0140b32de3018"><div class="ttname"><a href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a2b5182761990ae10bee0140b32de3018">GlobalRegistration::Match4PCSBase::base_3D_</a></div><div class="ttdeci">std::vector&lt; Point3D &gt; base_3D_</div><div class="ttdef"><b>Definition:</b> match4pcsBase.h:149</div></div>
<div class="ttc" id="class_global_registration_1_1_match4_p_c_s_base_xhtml_a69f1578bc6610579eb266824abb26582"><div class="ttname"><a href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a69f1578bc6610579eb266824abb26582">GlobalRegistration::Match4PCSBase::sampled_P_3D_</a></div><div class="ttdeci">std::vector&lt; Point3D &gt; sampled_P_3D_</div><div class="ttdef"><b>Definition:</b> match4pcsBase.h:145</div></div>
<div class="ttc" id="class_global_registration_1_1_match4_p_c_s_base_xhtml_ab7578fd1e68ccad0ce00bbf4e554248e"><div class="ttname"><a href="class_global_registration_1_1_match4_p_c_s_base.xhtml#ab7578fd1e68ccad0ce00bbf4e554248e">GlobalRegistration::Match4PCSBase::sampled_Q_3D_</a></div><div class="ttdeci">std::vector&lt; Point3D &gt; sampled_Q_3D_</div><div class="ttdef"><b>Definition:</b> match4pcsBase.h:147</div></div>
<div class="ttc" id="struct_global_registration_1_1_match4_p_c_s_base_1_1_dummy_transform_visitor_xhtml_a62594155cdbf0f195df9ad3ec3c5fccc"><div class="ttname"><a href="struct_global_registration_1_1_match4_p_c_s_base_1_1_dummy_transform_visitor.xhtml#a62594155cdbf0f195df9ad3ec3c5fccc">GlobalRegistration::Match4PCSBase::DummyTransformVisitor::operator()</a></div><div class="ttdeci">void operator()(float, float, Eigen::Ref&lt; Match4PCSBase::MatrixType &gt;) const</div><div class="ttdef"><b>Definition:</b> match4pcsBase.h:70</div></div>
<div class="ttc" id="class_global_registration_1_1_match4_p_c_s_base_xhtml_adcacd57bf5844d8205a7620c72c0d450"><div class="ttname"><a href="class_global_registration_1_1_match4_p_c_s_base.xhtml#adcacd57bf5844d8205a7620c72c0d450">GlobalRegistration::Match4PCSBase::TryOneBase</a></div><div class="ttdeci">bool TryOneBase()</div><div class="ttdef"><b>Definition:</b> match4pcsBase.cc:667</div></div>
<div class="ttc" id="class_global_registration_1_1_match4_p_c_s_base_xhtml_a2c158e8371931d9d9f2be64e8a6213c6"><div class="ttname"><a href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a2c158e8371931d9d9f2be64e8a6213c6">GlobalRegistration::Match4PCSBase::PairsVector</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; int, int &gt; &gt; PairsVector</div><div class="ttdef"><b>Definition:</b> match4pcsBase.h:64</div></div>
<div class="ttc" id="class_global_registration_1_1_match4_p_c_s_base_xhtml_aa5728ef38ba5d5d64611ffd7926198f2"><div class="ttname"><a href="class_global_registration_1_1_match4_p_c_s_base.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">GlobalRegistration::Match4PCSBase::Scalar</a></div><div class="ttdeci">typename Point3D::Scalar Scalar</div><div class="ttdef"><b>Definition:</b> match4pcsBase.h:65</div></div>
<div class="ttc" id="class_global_registration_1_1_match4_p_c_s_base_xhtml_af9b9a0034ec3ff9646b36ce6250702cd"><div class="ttname"><a href="class_global_registration_1_1_match4_p_c_s_base.xhtml#af9b9a0034ec3ff9646b36ce6250702cd">GlobalRegistration::Match4PCSBase::SelectRandomTriangle</a></div><div class="ttdeci">bool SelectRandomTriangle(int &amp;base1, int &amp;base2, int &amp;base3)</div><div class="ttdef"><b>Definition:</b> match4pcsBase.cc:173</div></div>
<div class="ttc" id="class_global_registration_1_1_match4_p_c_s_base_xhtml_a7a836ae299795e818b1d39dfb47c43cd"><div class="ttname"><a href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a7a836ae299795e818b1d39dfb47c43cd">GlobalRegistration::Match4PCSBase::current_congruent_</a></div><div class="ttdeci">int current_congruent_[4]</div><div class="ttdef"><b>Definition:</b> match4pcsBase.h:143</div></div>
<div class="ttc" id="class_global_registration_1_1_match4_p_c_s_base_xhtml_af4249983ba17f93c48ba4f4d83442511"><div class="ttname"><a href="class_global_registration_1_1_match4_p_c_s_base.xhtml#af4249983ba17f93c48ba4f4d83442511">GlobalRegistration::Match4PCSBase::ComputeRigidTransformation</a></div><div class="ttdeci">bool ComputeRigidTransformation(const std::array&lt; std::pair&lt; Point3D, Point3D &gt;, 4 &gt; &amp;pairs, const Eigen::Matrix&lt; Scalar, 3, 1 &gt; &amp;centroid1, Eigen::Matrix&lt; Scalar, 3, 1 &gt; centroid2, Scalar max_angle, Eigen::Ref&lt; MatrixType &gt; transform, Scalar &amp;rms_, bool computeScale)</div><div class="ttdef"><b>Definition:</b> match4pcsBase.cc:459</div></div>
<div class="ttc" id="class_global_registration_1_1_match4_p_c_s_base_xhtml_ace9c9b9614ee84b3473d8bfc6a9c261a"><div class="ttname"><a href="class_global_registration_1_1_match4_p_c_s_base.xhtml#ace9c9b9614ee84b3473d8bfc6a9c261a">GlobalRegistration::Match4PCSBase::current_trial_</a></div><div class="ttdeci">int current_trial_</div><div class="ttdef"><b>Definition:</b> match4pcsBase.h:160</div></div>
<div class="ttc" id="struct_global_registration_1_1_sampling_1_1_uniform_dist_sampler_xhtml"><div class="ttname"><a href="struct_global_registration_1_1_sampling_1_1_uniform_dist_sampler.xhtml">GlobalRegistration::Sampling::UniformDistSampler</a></div><div class="ttdef"><b>Definition:</b> sampling.h:59</div></div>
<div class="ttc" id="class_global_registration_1_1_match4_p_c_s_base_xhtml_a414d078256fc522cb1061e7a1dd9c749"><div class="ttname"><a href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a414d078256fc522cb1061e7a1dd9c749">GlobalRegistration::Match4PCSBase::getFirstSampled</a></div><div class="ttdeci">const std::vector&lt; Point3D &gt; &amp; getFirstSampled() const</div><div class="ttdef"><b>Definition:</b> match4pcsBase.h:82</div></div>
<div class="ttc" id="class_global_registration_1_1_match4_p_c_s_base_xhtml_a6a35e3e2717fd5577364cfc64a2054f0"><div class="ttname"><a href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a6a35e3e2717fd5577364cfc64a2054f0">GlobalRegistration::Match4PCSBase::qcentroid2_</a></div><div class="ttdeci">Eigen::Matrix&lt; Scalar, 3, 1 &gt; qcentroid2_</div><div class="ttdef"><b>Definition:</b> match4pcsBase.h:136</div></div>
<div class="ttc" id="class_global_registration_1_1_match4_p_c_s_base_xhtml_a63d5f8d1043f6993c0bc3f14291e04b6"><div class="ttname"><a href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a63d5f8d1043f6993c0bc3f14291e04b6">GlobalRegistration::Match4PCSBase::MeanDistance</a></div><div class="ttdeci">Scalar MeanDistance()</div><div class="ttdef"><b>Definition:</b> match4pcsBase.cc:150</div></div>
<div class="ttc" id="class_global_registration_1_1_match4_p_c_s_base_xhtml_ac9a328320c7729722e3a4b9234f2dadf"><div class="ttname"><a href="class_global_registration_1_1_match4_p_c_s_base.xhtml#ac9a328320c7729722e3a4b9234f2dadf">GlobalRegistration::Match4PCSBase::Verify</a></div><div class="ttdeci">Scalar Verify(const Eigen::Ref&lt; const MatrixType &gt; &amp;mat)</div><div class="ttdef"><b>Definition:</b> match4pcsBase.cc:606</div></div>
<div class="ttc" id="class_global_registration_1_1_match4_p_c_s_base_xhtml_ae42fcca074895cbefc1c50723bff465b"><div class="ttname"><a href="class_global_registration_1_1_match4_p_c_s_base.xhtml#ae42fcca074895cbefc1c50723bff465b">GlobalRegistration::Match4PCSBase::options_</a></div><div class="ttdeci">const Match4PCSOptions options_</div><div class="ttdef"><b>Definition:</b> match4pcsBase.h:164</div></div>
<div class="ttc" id="class_global_registration_1_1_match4_p_c_s_base_xhtml_ad73c2959940a8cd9db8b9273ac877b94"><div class="ttname"><a href="class_global_registration_1_1_match4_p_c_s_base.xhtml#ad73c2959940a8cd9db8b9273ac877b94">GlobalRegistration::Match4PCSBase::kLargeNumber</a></div><div class="ttdeci">static constexpr Scalar kLargeNumber</div><div class="ttdef"><b>Definition:</b> match4pcsBase.h:76</div></div>
<div class="ttc" id="class_global_registration_1_1_match4_p_c_s_base_xhtml_a3b37709e1bda55f4d109c9a2dbd7b170"><div class="ttname"><a href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a3b37709e1bda55f4d109c9a2dbd7b170">GlobalRegistration::Match4PCSBase::SelectQuadrilateral</a></div><div class="ttdeci">bool SelectQuadrilateral(Scalar &amp;invariant1, Scalar &amp;invariant2, int &amp;base1, int &amp;base2, int &amp;base3, int &amp;base4)</div><div class="ttdef"><b>Definition:</b> match4pcsBase.cc:267</div></div>
<div class="ttc" id="class_global_registration_1_1_match4_p_c_s_base_xhtml_a509b4769237a09794b71c91101484687"><div class="ttname"><a href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a509b4769237a09794b71c91101484687">GlobalRegistration::Match4PCSBase::centroid_</a></div><div class="ttdeci">VectorType centroid_</div><div class="ttdef"><b>Definition:</b> match4pcsBase.h:129</div></div>
<div class="ttc" id="class_global_registration_1_1_match4_p_c_s_base_xhtml_a3510115515ab8b6fecf0d1a66fae1959"><div class="ttname"><a href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a3510115515ab8b6fecf0d1a66fae1959">GlobalRegistration::Match4PCSBase::P_mean_distance_</a></div><div class="ttdeci">Scalar P_mean_distance_</div><div class="ttdef"><b>Definition:</b> match4pcsBase.h:124</div></div>
<div class="ttc" id="struct_global_registration_1_1_match4_p_c_s_options_xhtml"><div class="ttname"><a href="struct_global_registration_1_1_match4_p_c_s_options.xhtml">GlobalRegistration::Match4PCSOptions</a></div><div class="ttdef"><b>Definition:</b> shared4pcs.h:149</div></div>
<div class="ttc" id="class_global_registration_1_1_match4_p_c_s_base_xhtml_a33839e739282bddc8523cc1a7410195b"><div class="ttname"><a href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a33839e739282bddc8523cc1a7410195b">GlobalRegistration::Match4PCSBase::transform_</a></div><div class="ttdeci">Eigen::Matrix&lt; Scalar, 4, 4 &gt; transform_</div><div class="ttdef"><b>Definition:</b> match4pcsBase.h:131</div></div>
<div class="ttc" id="class_global_registration_1_1_match4_p_c_s_base_xhtml_a48e216dcb45b4f5a337c448ee0c519e5"><div class="ttname"><a href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a48e216dcb45b4f5a337c448ee0c519e5">GlobalRegistration::Match4PCSBase::centroid_P_</a></div><div class="ttdeci">VectorType centroid_P_</div><div class="ttdef"><b>Definition:</b> match4pcsBase.h:154</div></div>
<div class="ttc" id="class_global_registration_1_1_match4_p_c_s_base_xhtml_a869c21b7c49110f7301e78d64d9e0e57"><div class="ttname"><a href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a869c21b7c49110f7301e78d64d9e0e57">GlobalRegistration::Match4PCSBase::ExtractPairs</a></div><div class="ttdeci">virtual void ExtractPairs(Scalar pair_distance, Scalar pair_normals_angle, Scalar pair_distance_epsilon, int base_point1, int base_point2, PairsVector *pairs) const =0</div></div>
<div class="ttc" id="class_global_registration_1_1_match4_p_c_s_base_xhtml_a60395ea978ada7861d82d6e0bcbdd47a"><div class="ttname"><a href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a60395ea978ada7861d82d6e0bcbdd47a">GlobalRegistration::Match4PCSBase::MatrixType</a></div><div class="ttdeci">Eigen::Matrix&lt; Scalar, 4, 4 &gt; MatrixType</div><div class="ttdef"><b>Definition:</b> match4pcsBase.h:67</div></div>
<div class="ttc" id="class_global_registration_1_1_match4_p_c_s_base_xhtml_af1338e5d230103c2d8268e3fccdf351c"><div class="ttname"><a href="class_global_registration_1_1_match4_p_c_s_base.xhtml#af1338e5d230103c2d8268e3fccdf351c">GlobalRegistration::Match4PCSBase::kNumberOfDiameterTrials</a></div><div class="ttdeci">static constexpr int kNumberOfDiameterTrials</div><div class="ttdef"><b>Definition:</b> match4pcsBase.h:75</div></div>
<div class="ttc" id="class_global_registration_1_1_match4_p_c_s_base_xhtml_acba41e3c13ed475b3dac6448be654cd6"><div class="ttname"><a href="class_global_registration_1_1_match4_p_c_s_base.xhtml#acba41e3c13ed475b3dac6448be654cd6">GlobalRegistration::Match4PCSBase::Match4PCSBase</a></div><div class="ttdeci">Match4PCSBase(const Match4PCSOptions &amp;options, const Utils::Logger &amp;logger)</div><div class="ttdef"><b>Definition:</b> match4pcsBase.cc:134</div></div>
<div class="ttc" id="class_global_registration_1_1_match4_p_c_s_base_xhtml_a60e9fb29c45fa5f1ce8c31a5055becca"><div class="ttname"><a href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a60e9fb29c45fa5f1ce8c31a5055becca">GlobalRegistration::Match4PCSBase::kd_tree_</a></div><div class="ttdeci">KdTree&lt; Scalar &gt; kd_tree_</div><div class="ttdef"><b>Definition:</b> match4pcsBase.h:162</div></div>
<div class="ttc" id="class_global_registration_1_1_utils_1_1_logger_xhtml_a80be1cf2fd1833a5062f0699e40fc396"><div class="ttname"><a href="class_global_registration_1_1_utils_1_1_logger.xhtml#a80be1cf2fd1833a5062f0699e40fc396">GlobalRegistration::Utils::Logger::Log</a></div><div class="ttdeci">void Log(const Args &amp;...args) const</div><div class="ttdef"><b>Definition:</b> logger.h:74</div></div>
<div class="ttc" id="namespace_global_registration_1_1_utils_xhtml_aca8aed96f103991f3cc1cb3f3d5ed34a"><div class="ttname"><a href="namespace_global_registration_1_1_utils.xhtml#aca8aed96f103991f3cc1cb3f3d5ed34a">GlobalRegistration::Utils::LogLevel</a></div><div class="ttdeci">LogLevel</div><div class="ttdef"><b>Definition:</b> logger.h:55</div></div>
<div class="ttc" id="class_global_registration_1_1_match4_p_c_s_base_xhtml_adac9aa457425985cf778c69c60fecc21"><div class="ttname"><a href="class_global_registration_1_1_match4_p_c_s_base.xhtml#adac9aa457425985cf778c69c60fecc21">GlobalRegistration::Match4PCSBase::Initialize</a></div><div class="ttdeci">virtual void Initialize(const std::vector&lt; Point3D &gt; &amp;P, const std::vector&lt; Point3D &gt; &amp;Q)=0</div></div>
<div class="ttc" id="class_global_registration_1_1_match4_p_c_s_base_xhtml_ab770b30d192c7fbb1156382e69d8ba64"><div class="ttname"><a href="class_global_registration_1_1_match4_p_c_s_base.xhtml#ab770b30d192c7fbb1156382e69d8ba64">GlobalRegistration::Match4PCSBase::VectorType</a></div><div class="ttdeci">typename Point3D::VectorType VectorType</div><div class="ttdef"><b>Definition:</b> match4pcsBase.h:66</div></div>
<div class="ttc" id="class_global_registration_1_1_point3_d_xhtml_a6dc8c7d110e5f0ccf1098b75702e8d83"><div class="ttname"><a href="class_global_registration_1_1_point3_d.xhtml#a6dc8c7d110e5f0ccf1098b75702e8d83">GlobalRegistration::Point3D::VectorType</a></div><div class="ttdeci">Eigen::Matrix&lt; Scalar, 3, 1 &gt; VectorType</div><div class="ttdef"><b>Definition:</b> shared4pcs.h:65</div></div>
<div class="ttc" id="class_global_registration_1_1_match4_p_c_s_base_xhtml_a9201f2939d9d1359a1621be82367d886"><div class="ttname"><a href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a9201f2939d9d1359a1621be82367d886">GlobalRegistration::Match4PCSBase::~Match4PCSBase</a></div><div class="ttdeci">virtual ~Match4PCSBase()</div><div class="ttdef"><b>Definition:</b> match4pcsBase.cc:147</div></div>
<div class="ttc" id="class_global_registration_1_1_match4_p_c_s_base_xhtml_afd714116c6898bc5913a9d77eca865ff"><div class="ttname"><a href="class_global_registration_1_1_match4_p_c_s_base.xhtml#afd714116c6898bc5913a9d77eca865ff">GlobalRegistration::Match4PCSBase::Perform_N_steps</a></div><div class="ttdeci">bool Perform_N_steps(int n, Eigen::Ref&lt; MatrixType &gt; transformation, std::vector&lt; Point3D &gt; *Q, const Visitor &amp;v)</div><div class="ttdef"><b>Definition:</b> match4pcsBase.hpp:209</div></div>
<div class="ttc" id="class_global_registration_1_1_kd_tree_xhtml"><div class="ttname"><a href="class_global_registration_1_1_kd_tree.xhtml">GlobalRegistration::KdTree&lt; Scalar &gt;</a></div></div>
<div class="ttc" id="class_global_registration_1_1_point3_d_xhtml_a7d4adee318864f86e62a22a4168061bb"><div class="ttname"><a href="class_global_registration_1_1_point3_d.xhtml#a7d4adee318864f86e62a22a4168061bb">GlobalRegistration::Point3D::Scalar</a></div><div class="ttdeci">float Scalar</div><div class="ttdef"><b>Definition:</b> shared4pcs.h:64</div></div>
<div class="ttc" id="class_global_registration_1_1_match4_p_c_s_base_xhtml_a75c9ca6da4d064f8484e432b7f795b8c"><div class="ttname"><a href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a75c9ca6da4d064f8484e432b7f795b8c">GlobalRegistration::Match4PCSBase::ComputeTransformation</a></div><div class="ttdeci">Scalar ComputeTransformation(const std::vector&lt; Point3D &gt; &amp;P, std::vector&lt; Point3D &gt; *Q, Eigen::Ref&lt; MatrixType &gt; transformation, const Sampler &amp;sampler=Sampler(), const Visitor &amp;v=Visitor())</div><div class="ttdef"><b>Definition:</b> match4pcsBase.hpp:62</div></div>
<div class="ttc" id="namespace_global_registration_xhtml"><div class="ttname"><a href="namespace_global_registration.xhtml">GlobalRegistration</a></div><div class="ttdef"><b>Definition:</b> bbox.h:54</div></div>
<div class="ttc" id="class_global_registration_1_1_match4_p_c_s_base_xhtml_a0c15b30e15df63f9ffab80fdda42cb84"><div class="ttname"><a href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a0c15b30e15df63f9ffab80fdda42cb84">GlobalRegistration::Match4PCSBase::randomGenerator_</a></div><div class="ttdeci">std::mt19937 randomGenerator_</div><div class="ttdef"><b>Definition:</b> match4pcsBase.h:166</div></div>
<div class="ttc" id="class_global_registration_1_1_utils_1_1_timer_xhtml"><div class="ttname"><a href="class_global_registration_1_1_utils_1_1_timer.xhtml">GlobalRegistration::Utils::Timer</a></div><div class="ttdef"><b>Definition:</b> timer.h:56</div></div>
<div class="ttc" id="class_global_registration_1_1_match4_p_c_s_base_xhtml_a0d3cd539491e61af71eb21e476db9539"><div class="ttname"><a href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a0d3cd539491e61af71eb21e476db9539">GlobalRegistration::Match4PCSBase::qcentroid1_</a></div><div class="ttdeci">Eigen::Matrix&lt; Scalar, 3, 1 &gt; qcentroid1_</div><div class="ttdef"><b>Definition:</b> match4pcsBase.h:136</div></div>
<div class="ttc" id="class_global_registration_1_1_match4_p_c_s_base_xhtml_acecb2de1f163aff07803ebf905ab3e36"><div class="ttname"><a href="class_global_registration_1_1_match4_p_c_s_base.xhtml#acecb2de1f163aff07803ebf905ab3e36">GlobalRegistration::Match4PCSBase::TryCongruentSet</a></div><div class="ttdeci">bool TryCongruentSet(int base_id1, int base_id2, int base_id3, int base_id4, const std::vector&lt; Quadrilateral &gt; &amp;congruent_quads, size_t &amp;nbCongruent)</div><div class="ttdef"><b>Definition:</b> match4pcsBase.cc:353</div></div>
<div class="ttc" id="class_global_registration_1_1_match4_p_c_s_base_xhtml_aa53647c24830f95a58a8ba3c857b6378"><div class="ttname"><a href="class_global_registration_1_1_match4_p_c_s_base.xhtml#aa53647c24830f95a58a8ba3c857b6378">GlobalRegistration::Match4PCSBase::DefaultSampler</a></div><div class="ttdeci">Sampling::UniformDistSampler DefaultSampler</div><div class="ttdef"><b>Definition:</b> match4pcsBase.h:73</div></div>
<div class="ttc" id="class_global_registration_1_1_match4_p_c_s_base_xhtml_ae197b4fe78911f96d3732d5faf0a6901"><div class="ttname"><a href="class_global_registration_1_1_match4_p_c_s_base.xhtml#ae197b4fe78911f96d3732d5faf0a6901">GlobalRegistration::Match4PCSBase::FindCongruentQuadrilaterals</a></div><div class="ttdeci">virtual bool FindCongruentQuadrilaterals(Scalar invariant1, Scalar invariant2, Scalar distance_threshold1, Scalar distance_threshold2, const PairsVector &amp;P_pairs, const PairsVector &amp;Q_pairs, std::vector&lt; Quadrilateral &gt; *quadrilaterals) const =0</div></div>
<div class="ttc" id="class_global_registration_1_1_match4_p_c_s_base_xhtml_a423c63bc1aece6379b9b6a8cf9d5aa0f"><div class="ttname"><a href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a423c63bc1aece6379b9b6a8cf9d5aa0f">GlobalRegistration::Match4PCSBase::TryQuadrilateral</a></div><div class="ttdeci">bool TryQuadrilateral(Scalar &amp;invariant1, Scalar &amp;invariant2, int &amp;base1, int &amp;base2, int &amp;base3, int &amp;base4)</div><div class="ttdef"><b>Definition:</b> match4pcsBase.cc:213</div></div>
<div class="ttc" id="class_global_registration_1_1_match4_p_c_s_base_xhtml_ac96a4c4515685355719c55ca8681b03a"><div class="ttname"><a href="class_global_registration_1_1_match4_p_c_s_base.xhtml#ac96a4c4515685355719c55ca8681b03a">GlobalRegistration::Match4PCSBase::Q_copy_</a></div><div class="ttdeci">std::vector&lt; Point3D &gt; Q_copy_</div><div class="ttdef"><b>Definition:</b> match4pcsBase.h:152</div></div>
<div class="ttc" id="class_global_registration_1_1_match4_p_c_s_base_xhtml_ad965fe63c333bf38ed444172ab35eb08"><div class="ttname"><a href="class_global_registration_1_1_match4_p_c_s_base.xhtml#ad965fe63c333bf38ed444172ab35eb08">GlobalRegistration::Match4PCSBase::getSecondSampled</a></div><div class="ttdeci">const std::vector&lt; Point3D &gt; &amp; getSecondSampled() const</div><div class="ttdef"><b>Definition:</b> match4pcsBase.h:87</div></div>
<div class="ttc" id="class_global_registration_1_1_match4_p_c_s_base_xhtml_a995d1bd4cc26b4bf799222698e18a78c"><div class="ttname"><a href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a995d1bd4cc26b4bf799222698e18a78c">GlobalRegistration::Match4PCSBase::base3D</a></div><div class="ttdeci">const std::vector&lt; Point3D &gt; &amp; base3D() const</div><div class="ttdef"><b>Definition:</b> match4pcsBase.h:272</div></div>
<div class="ttc" id="class_global_registration_1_1_match4_p_c_s_base_xhtml"><div class="ttname"><a href="class_global_registration_1_1_match4_p_c_s_base.xhtml">GlobalRegistration::Match4PCSBase</a></div><div class="ttdef"><b>Definition:</b> match4pcsBase.h:61</div></div>
<div class="ttc" id="class_global_registration_1_1_match4_p_c_s_base_xhtml_a8e8c05b6f4156e85f6239f5f06537516"><div class="ttname"><a href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a8e8c05b6f4156e85f6239f5f06537516">GlobalRegistration::Match4PCSBase::Log</a></div><div class="ttdeci">void Log(Args...args) const</div><div class="ttdef"><b>Definition:</b> match4pcsBase.h:185</div></div>
<div class="ttc" id="class_global_registration_1_1_utils_1_1_logger_xhtml"><div class="ttname"><a href="class_global_registration_1_1_utils_1_1_logger.xhtml">GlobalRegistration::Utils::Logger</a></div><div class="ttdef"><b>Definition:</b> logger.h:62</div></div>
<div class="ttc" id="class_global_registration_1_1_match4_p_c_s_base_xhtml_a9d1ce6ba9087e5624424871a4c0750a3"><div class="ttname"><a href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a9d1ce6ba9087e5624424871a4c0750a3">GlobalRegistration::Match4PCSBase::distance_factor</a></div><div class="ttdeci">static constexpr Scalar distance_factor</div><div class="ttdef"><b>Definition:</b> match4pcsBase.h:77</div></div>
<div class="ttc" id="class_global_registration_1_1_match4_p_c_s_base_xhtml_a9b1d96361ae9628f04a7faef65f84735"><div class="ttname"><a href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a9b1d96361ae9628f04a7faef65f84735">GlobalRegistration::Match4PCSBase::best_LCP_</a></div><div class="ttdeci">Scalar best_LCP_</div><div class="ttdef"><b>Definition:</b> match4pcsBase.h:158</div></div>
<div class="ttc" id="class_global_registration_1_1_match4_p_c_s_base_xhtml_a08fe258be1178c7ae214ccf0fa1ff27e"><div class="ttname"><a href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a08fe258be1178c7ae214ccf0fa1ff27e">GlobalRegistration::Match4PCSBase::P_diameter_</a></div><div class="ttdeci">Scalar P_diameter_</div><div class="ttdef"><b>Definition:</b> match4pcsBase.h:121</div></div>
<div class="ttc" id="class_global_registration_1_1_match4_p_c_s_base_xhtml_a2bfa167883262fea0ec468ddea97a9de"><div class="ttname"><a href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a2bfa167883262fea0ec468ddea97a9de">GlobalRegistration::Match4PCSBase::number_of_trials_</a></div><div class="ttdeci">int number_of_trials_</div><div class="ttdef"><b>Definition:</b> match4pcsBase.h:114</div></div>
<div class="ttc" id="struct_global_registration_1_1_match4_p_c_s_base_1_1_dummy_transform_visitor_xhtml_a21be8f78f44b2177d39d4cd987685de3"><div class="ttname"><a href="struct_global_registration_1_1_match4_p_c_s_base_1_1_dummy_transform_visitor.xhtml#a21be8f78f44b2177d39d4cd987685de3">GlobalRegistration::Match4PCSBase::DummyTransformVisitor::needsGlobalTransformation</a></div><div class="ttdeci">constexpr bool needsGlobalTransformation() const</div><div class="ttdef"><b>Definition:</b> match4pcsBase.h:71</div></div>
<div class="ttc" id="class_global_registration_1_1_match4_p_c_s_base_xhtml_a5ccea1d074d5061123f2e6afd0a57648"><div class="ttname"><a href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a5ccea1d074d5061123f2e6afd0a57648">GlobalRegistration::Match4PCSBase::logger_</a></div><div class="ttdeci">const Utils::Logger &amp; logger_</div><div class="ttdef"><b>Definition:</b> match4pcsBase.h:168</div></div>
<div class="ttc" id="class_global_registration_1_1_match4_p_c_s_base_xhtml_a488623aecb96323142b2e31a8e0f2f71"><div class="ttname"><a href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a488623aecb96323142b2e31a8e0f2f71">GlobalRegistration::Match4PCSBase::max_base_diameter_</a></div><div class="ttdeci">Scalar max_base_diameter_</div><div class="ttdef"><b>Definition:</b> match4pcsBase.h:119</div></div>
<div class="ttc" id="struct_global_registration_1_1_match4_p_c_s_base_1_1_dummy_transform_visitor_xhtml"><div class="ttname"><a href="struct_global_registration_1_1_match4_p_c_s_base_1_1_dummy_transform_visitor.xhtml">GlobalRegistration::Match4PCSBase::DummyTransformVisitor</a></div><div class="ttdef"><b>Definition:</b> match4pcsBase.h:69</div></div>
<div class="ttc" id="class_global_registration_1_1_match4_p_c_s_base_xhtml_a7d9cd2d589b9ebe5bf1793ede66f942b"><div class="ttname"><a href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a7d9cd2d589b9ebe5bf1793ede66f942b">GlobalRegistration::Match4PCSBase::base_</a></div><div class="ttdeci">int base_[4]</div><div class="ttdef"><b>Definition:</b> match4pcsBase.h:139</div></div>
<div class="ttc" id="class_global_registration_1_1_match4_p_c_s_base_xhtml_a6da7132684e7b8285711303d136aed79"><div class="ttname"><a href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a6da7132684e7b8285711303d136aed79">GlobalRegistration::Match4PCSBase::init</a></div><div class="ttdeci">void init(const std::vector&lt; Point3D &gt; &amp;P, const std::vector&lt; Point3D &gt; &amp;Q, const Sampler &amp;sampler)</div><div class="ttdef"><b>Definition:</b> match4pcsBase.hpp:90</div></div>
<div class="ttc" id="class_global_registration_1_1_match4_p_c_s_base_xhtml_a5167aafa6c5d072884999fce4076a9e1"><div class="ttname"><a href="class_global_registration_1_1_match4_p_c_s_base.xhtml#a5167aafa6c5d072884999fce4076a9e1">GlobalRegistration::Match4PCSBase::centroid_Q_</a></div><div class="ttdeci">VectorType centroid_Q_</div><div class="ttdef"><b>Definition:</b> match4pcsBase.h:156</div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Tue Sep 19 2017 09:23:23 for Super4PCS Library by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.13
</small></address>
</body>
</html>
