<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Super4PCS Library: /export/home/cezanne/nmellado/git/Super4PCS/src/super4pcs/algorithms/match4pcsBase.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js", "TeX/AMSsymbols.js", "TeX/AMSmath.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Super4PCS Library
   &#160;<span id="projectnumber">V1.1.2(996102d)</span>
   </div>
  </td>
   <td>        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
</td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('a03989_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">match4pcsBase.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">// Copyright 2017 Nicolas Mellado</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">// you may not use this file except in compliance with the License.</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">// You may obtain a copy of the License at</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">//   http://www.apache.org/licenses/LICENSE-2.0</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">// Unless required by applicable law or agreed to in writing, software</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">// distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">// See the License for the specific language governing permissions and</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">// limitations under the License.</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">// -------------------------------------------------------------------------- //</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">// Authors: Dror Aiger, Yoni Weill, Nicolas Mellado</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">// This file is part of the implementation of the 4-points Congruent Sets (4PCS)</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment">// algorithm presented in:</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment">// 4-points Congruent Sets for Robust Surface Registration</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">// Dror Aiger, Niloy J. Mitra, Daniel Cohen-Or</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment">// ACM SIGGRAPH 2008 and ACM Transaction of Graphics.</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment">// Given two sets of points in 3-space, P and Q, the algorithm applies RANSAC</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="comment">// in roughly O(n^2) time instead of O(n^3) for standard RANSAC, using an</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="comment">// efficient method based on invariants, to find the set of all 4-points in Q</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment">// that can be matched by rigid transformation to a given set of 4-points in P</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment">// called a base. This avoids the need to examine all sets of 3-points in Q</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment">// against any base of 3-points in P as in standard RANSAC.</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="comment">// The algorithm can use colors and normals to speed-up the matching</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="comment">// and to improve the quality. It can be easily extended to affine/similarity</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="comment">// transformation but then the speed-up is smaller because of the large number</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment">// of congruent sets. The algorithm can also limit the range of transformations</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment">// when the application knows something on the initial pose but this is not</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">// necessary in general (though can speed the runtime significantly).</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment">// Home page of the 4PCS project (containing the paper, presentations and a</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment">// demo): http://graphics.stanford.edu/~niloy/research/fpcs/fpcs_sig_08.html</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment">// Use google search on &quot;4-points congruent sets&quot; to see many related papers</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment">// and applications.</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="preprocessor">#ifndef _SUPER4PCS_ALGO_MATCH_4PCS_BASE_</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="preprocessor">#define _SUPER4PCS_ALGO_MATCH_4PCS_BASE_</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="preprocessor">#include &quot;super4pcs/shared4pcs.h&quot;</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="preprocessor">#include &quot;super4pcs/sampling.h&quot;</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="preprocessor">#include &quot;super4pcs/accelerators/kdtree.h&quot;</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="preprocessor">#include &quot;super4pcs/utils/logger.h&quot;</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="preprocessor">#ifdef TEST_GLOBAL_TIMINGS</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="preprocessor">#   include &quot;super4pcs/utils/timer.h&quot;</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="keyword">namespace </span><a class="code" href="a04027.xhtml">GlobalRegistration</a>{</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno"><a class="line" href="a04648.xhtml">   61</a></span>&#160;<span class="keyword">class </span><a class="code" href="a04648.xhtml">Match4PCSBase</a> {</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00064"></a><span class="lineno"><a class="line" href="a04648.xhtml#a2c158e8371931d9d9f2be64e8a6213c6">   64</a></span>&#160;    <span class="keyword">using</span> <a class="code" href="a04648.xhtml#a2c158e8371931d9d9f2be64e8a6213c6">PairsVector</a> =  std::vector&lt; std::pair&lt;int, int&gt; &gt;;</div><div class="line"><a name="l00065"></a><span class="lineno"><a class="line" href="a04648.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">   65</a></span>&#160;    <span class="keyword">using</span> <a class="code" href="a04648.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">Scalar</a> = <span class="keyword">typename</span> <a class="code" href="a04680.xhtml#a7d4adee318864f86e62a22a4168061bb">Point3D::Scalar</a>;</div><div class="line"><a name="l00066"></a><span class="lineno"><a class="line" href="a04648.xhtml#ab770b30d192c7fbb1156382e69d8ba64">   66</a></span>&#160;    <span class="keyword">using</span> <a class="code" href="a04648.xhtml#ab770b30d192c7fbb1156382e69d8ba64">VectorType</a> = <span class="keyword">typename</span> <a class="code" href="a04680.xhtml#a6dc8c7d110e5f0ccf1098b75702e8d83">Point3D::VectorType</a>;</div><div class="line"><a name="l00067"></a><span class="lineno"><a class="line" href="a04648.xhtml#a60395ea978ada7861d82d6e0bcbdd47a">   67</a></span>&#160;    <span class="keyword">using</span> <a class="code" href="a04648.xhtml#a60395ea978ada7861d82d6e0bcbdd47a">MatrixType</a> = Eigen::Matrix&lt;Scalar, 4, 4&gt;;</div><div class="line"><a name="l00068"></a><span class="lineno"><a class="line" href="a04648.xhtml#a92bd739d292e1469a2295540747b1671">   68</a></span>&#160;    <span class="keyword">using</span> <a class="code" href="a04030.xhtml#aca8aed96f103991f3cc1cb3f3d5ed34a">LogLevel</a> = <a class="code" href="a04030.xhtml#aca8aed96f103991f3cc1cb3f3d5ed34a">Utils::LogLevel</a>;</div><div class="line"><a name="l00069"></a><span class="lineno"><a class="line" href="a04652.xhtml">   69</a></span>&#160;    <span class="keyword">struct </span><a class="code" href="a04652.xhtml">DummyTransformVisitor</a> {</div><div class="line"><a name="l00070"></a><span class="lineno"><a class="line" href="a04652.xhtml#a62594155cdbf0f195df9ad3ec3c5fccc">   70</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="a04652.xhtml#a62594155cdbf0f195df9ad3ec3c5fccc">operator() </a>(<span class="keywordtype">float</span>, <span class="keywordtype">float</span>, Eigen::Ref&lt;Match4PCSBase::MatrixType&gt;)<span class="keyword"> const </span>{}</div><div class="line"><a name="l00071"></a><span class="lineno"><a class="line" href="a04652.xhtml#a21be8f78f44b2177d39d4cd987685de3">   71</a></span>&#160;        constexpr <span class="keywordtype">bool</span> <a class="code" href="a04652.xhtml#a21be8f78f44b2177d39d4cd987685de3">needsGlobalTransformation</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <span class="keyword">false</span>; }</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    };</div><div class="line"><a name="l00073"></a><span class="lineno"><a class="line" href="a04648.xhtml#aa53647c24830f95a58a8ba3c857b6378">   73</a></span>&#160;    <span class="keyword">using</span> <a class="code" href="a04672.xhtml">DefaultSampler</a> = <a class="code" href="a04672.xhtml">Sampling::UniformDistSampler</a>;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno"><a class="line" href="a04648.xhtml#af1338e5d230103c2d8268e3fccdf351c">   75</a></span>&#160;    <span class="keyword">static</span> constexpr <span class="keywordtype">int</span> <a class="code" href="a04648.xhtml#af1338e5d230103c2d8268e3fccdf351c">kNumberOfDiameterTrials</a> = 1000;</div><div class="line"><a name="l00076"></a><span class="lineno"><a class="line" href="a04648.xhtml#ad73c2959940a8cd9db8b9273ac877b94">   76</a></span>&#160;    <span class="keyword">static</span> constexpr <a class="code" href="a04648.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">Scalar</a> <a class="code" href="a04648.xhtml#ad73c2959940a8cd9db8b9273ac877b94">kLargeNumber</a> = 1e9;</div><div class="line"><a name="l00077"></a><span class="lineno"><a class="line" href="a04648.xhtml#a9d1ce6ba9087e5624424871a4c0750a3">   77</a></span>&#160;    <span class="keyword">static</span> constexpr <a class="code" href="a04648.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">Scalar</a> <a class="code" href="a04648.xhtml#a9d1ce6ba9087e5624424871a4c0750a3">distance_factor</a> = 2.0;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keyword">virtual</span> <a class="code" href="a04648.xhtml#a1f55981546f2a1af08ad3555781f2dfe">~Match4PCSBase</a>();</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno"><a class="line" href="a04648.xhtml#a414d078256fc522cb1061e7a1dd9c749">   82</a></span>&#160;    <span class="keyword">inline</span> <span class="keyword">const</span> std::vector&lt;Point3D&gt;&amp; <a class="code" href="a04648.xhtml#a414d078256fc522cb1061e7a1dd9c749">getFirstSampled</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        <span class="keywordflow">return</span> sampled_P_3D_;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    }</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00087"></a><span class="lineno"><a class="line" href="a04648.xhtml#ad965fe63c333bf38ed444172ab35eb08">   87</a></span>&#160;    <span class="keyword">inline</span> <span class="keyword">const</span> std::vector&lt;Point3D&gt;&amp; <a class="code" href="a04648.xhtml#ad965fe63c333bf38ed444172ab35eb08">getSecondSampled</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        <span class="keywordflow">return</span> sampled_Q_3D_;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    }</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Sampler = <a class="code" href="a04648.xhtml#aa53647c24830f95a58a8ba3c857b6378">DefaultSampler</a>,</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;              <span class="keyword">typename</span> Visitor = <a class="code" href="a04652.xhtml">DummyTransformVisitor</a>&gt;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <a class="code" href="a04648.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">Scalar</a></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <a class="code" href="a04648.xhtml#a75c9ca6da4d064f8484e432b7f795b8c">ComputeTransformation</a>(<span class="keyword">const</span> std::vector&lt;Point3D&gt;&amp; P,</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                          std::vector&lt;Point3D&gt;* Q,</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                          Eigen::Ref&lt;MatrixType&gt; transformation,</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                          <span class="keyword">const</span> Sampler&amp; sampler = Sampler(),</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                          <span class="keyword">const</span> Visitor&amp; v = Visitor());</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="keyword">protected</span>:</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="keywordtype">int</span> number_of_trials_;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <a class="code" href="a04648.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">Scalar</a> max_base_diameter_;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <a class="code" href="a04648.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">Scalar</a> P_diameter_;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <a class="code" href="a04648.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">Scalar</a> P_mean_distance_;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <a class="code" href="a04648.xhtml#ab770b30d192c7fbb1156382e69d8ba64">VectorType</a> centroid_;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    Eigen::Matrix&lt;Scalar, 4, 4&gt; transform_;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    Eigen::Matrix&lt;Scalar, 3, 1&gt; qcentroid1_, qcentroid2_;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="keywordtype">int</span> base_[4];</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="keywordtype">int</span> current_congruent_[4];</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    std::vector&lt;Point3D&gt; sampled_P_3D_;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    std::vector&lt;Point3D&gt; sampled_Q_3D_;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    std::vector&lt;Point3D&gt; base_3D_;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    std::vector&lt;Point3D&gt; Q_copy_;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <a class="code" href="a04648.xhtml#ab770b30d192c7fbb1156382e69d8ba64">VectorType</a> centroid_P_;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <a class="code" href="a04648.xhtml#ab770b30d192c7fbb1156382e69d8ba64">VectorType</a> centroid_Q_;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <a class="code" href="a04648.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">Scalar</a> best_LCP_;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="keywordtype">int</span> current_trial_;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <a class="code" href="a04584.xhtml">KdTree&lt;Scalar&gt;</a> kd_tree_;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <span class="keyword">const</span> <a class="code" href="a04688.xhtml">Match4PCSOptions</a> options_;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    std::mt19937 randomGenerator_;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="keyword">const</span> <a class="code" href="a04692.xhtml">Utils::Logger</a> &amp;logger_;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="preprocessor">#ifdef TEST_GLOBAL_TIMINGS</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <a class="code" href="a04648.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">Scalar</a> totalTime;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <a class="code" href="a04648.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">Scalar</a> kdTreeTime;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <a class="code" href="a04648.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">Scalar</a> verifyTime;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <span class="keyword">using</span> Timer = <a class="code" href="a04696.xhtml">GlobalRegistration::Utils::Timer</a>;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="keyword">protected</span>:</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <a class="code" href="a04648.xhtml">Match4PCSBase</a>(<span class="keyword">const</span> <a class="code" href="a04688.xhtml">Match4PCSOptions</a>&amp; options, <span class="keyword">const</span> <a class="code" href="a04692.xhtml">Utils::Logger</a> &amp;logger );</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <span class="keyword">template</span> &lt;<a class="code" href="a04030.xhtml#aca8aed96f103991f3cc1cb3f3d5ed34a">Utils::LogLevel</a> level, <span class="keyword">typename</span>...Args&gt;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="keyword">inline</span> <span class="keywordtype">void</span> Log(Args...args)<span class="keyword"> const </span>{ logger_.<a class="code" href="a04692.xhtml#a80be1cf2fd1833a5062f0699e40fc396">Log</a>&lt;level&gt;(args...); }</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <a class="code" href="a04648.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">Scalar</a> MeanDistance();</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <span class="keywordtype">bool</span> SelectRandomTriangle(<span class="keywordtype">int</span>&amp; base1, <span class="keywordtype">int</span>&amp; base2, <span class="keywordtype">int</span>&amp; base3);</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <span class="keywordtype">bool</span> TryQuadrilateral(<a class="code" href="a04648.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">Scalar</a> &amp;invariant1, <a class="code" href="a04648.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">Scalar</a> &amp;invariant2,</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                          <span class="keywordtype">int</span> &amp;base1, <span class="keywordtype">int</span> &amp;base2, <span class="keywordtype">int</span> &amp;base3, <span class="keywordtype">int</span> &amp;base4);</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    <span class="keywordtype">bool</span> ComputeRigidTransformation(<span class="keyword">const</span> std::array&lt; std::pair&lt;Point3D, Point3D&gt;,4 &gt;&amp; pairs,</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                                    <span class="keyword">const</span> Eigen::Matrix&lt;Scalar, 3, 1&gt;&amp; centroid1,</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                                    Eigen::Matrix&lt;Scalar, 3, 1&gt; centroid2,</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                                    <a class="code" href="a04648.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">Scalar</a> max_angle,</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                                    Eigen::Ref&lt;MatrixType&gt; transform,</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                                    <a class="code" href="a04648.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">Scalar</a>&amp; rms_,</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                                    <span class="keywordtype">bool</span> computeScale );</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    <a class="code" href="a04648.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">Scalar</a> Verify(<span class="keyword">const</span> Eigen::Ref&lt;const MatrixType&gt; &amp; mat);</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Visitor&gt;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <span class="keywordtype">bool</span> Perform_N_steps(<span class="keywordtype">int</span> n,</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                         Eigen::Ref&lt;MatrixType&gt; transformation,</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                         std::vector&lt;Point3D&gt;* Q,</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                         <span class="keyword">const</span> Visitor&amp; v);</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    <span class="keywordtype">bool</span> TryOneBase();</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span></div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    Initialize(<span class="keyword">const</span> std::vector&lt;Point3D&gt;&amp; P,</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;               <span class="keyword">const</span> std::vector&lt;Point3D&gt;&amp; Q) = 0;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Sampler&gt;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    <span class="keywordtype">void</span> init(<span class="keyword">const</span> std::vector&lt;Point3D&gt;&amp; P,</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;              <span class="keyword">const</span> std::vector&lt;Point3D&gt;&amp; Q,</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;              <span class="keyword">const</span> Sampler&amp; sampler);</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    <span class="keywordtype">bool</span> SelectQuadrilateral(<a class="code" href="a04648.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">Scalar</a> &amp;invariant1, <a class="code" href="a04648.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">Scalar</a> &amp;invariant2,</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;                             <span class="keywordtype">int</span>&amp; base1, <span class="keywordtype">int</span>&amp; base2, <span class="keywordtype">int</span>&amp; base3, <span class="keywordtype">int</span>&amp; base4);</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    <span class="keyword">const</span> std::vector&lt;Point3D&gt;&amp; base3D()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> base_3D_; }</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span></div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    ExtractPairs( <a class="code" href="a04648.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">Scalar</a> pair_distance,</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                  <a class="code" href="a04648.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">Scalar</a> pair_normals_angle,</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                  <a class="code" href="a04648.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">Scalar</a> pair_distance_epsilon, <span class="keywordtype">int</span> base_point1,</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;                  <span class="keywordtype">int</span> base_point2,</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                  <a class="code" href="a04648.xhtml#a2c158e8371931d9d9f2be64e8a6213c6">PairsVector</a>* pairs) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span></div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    FindCongruentQuadrilaterals(<a class="code" href="a04648.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">Scalar</a> invariant1, <a class="code" href="a04648.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">Scalar</a> invariant2,</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;                                <a class="code" href="a04648.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">Scalar</a> distance_threshold1,</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;                                <a class="code" href="a04648.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">Scalar</a> distance_threshold2,</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;                                <span class="keyword">const</span> <a class="code" href="a04648.xhtml#a2c158e8371931d9d9f2be64e8a6213c6">PairsVector</a>&amp; P_pairs,</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;                                <span class="keyword">const</span> <a class="code" href="a04648.xhtml#a2c158e8371931d9d9f2be64e8a6213c6">PairsVector</a>&amp; Q_pairs,</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;                                std::vector&lt;Quadrilateral&gt;* quadrilaterals) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    <span class="keywordtype">bool</span> TryCongruentSet(<span class="keywordtype">int</span> base_id1,</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;                         <span class="keywordtype">int</span> base_id2,</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;                         <span class="keywordtype">int</span> base_id3,</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;                         <span class="keywordtype">int</span> base_id4,</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;                         <span class="keyword">const</span> std::vector&lt;Quadrilateral&gt; &amp;congruent_quads,</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;                         <span class="keywordtype">size_t</span> &amp;nbCongruent);</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    <span class="keywordtype">void</span> initKdTree();</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;}; </div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;} </div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;<span class="preprocessor">#include &quot;super4pcs/algorithms/match4pcsBase.hpp&quot;</span></div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;<span class="preprocessor">#endif</span></div><div class="ttc" id="a04680_xhtml_a6dc8c7d110e5f0ccf1098b75702e8d83"><div class="ttname"><a href="a04680.xhtml#a6dc8c7d110e5f0ccf1098b75702e8d83">GlobalRegistration::Point3D::VectorType</a></div><div class="ttdeci">Eigen::Matrix&lt; Scalar, 3, 1 &gt; VectorType</div><div class="ttdef"><b>Definition:</b> shared4pcs.h:64</div></div>
<div class="ttc" id="a04584_xhtml"><div class="ttname"><a href="a04584.xhtml">GlobalRegistration::KdTree&lt; Scalar &gt;</a></div></div>
<div class="ttc" id="a04648_xhtml_a2c158e8371931d9d9f2be64e8a6213c6"><div class="ttname"><a href="a04648.xhtml#a2c158e8371931d9d9f2be64e8a6213c6">GlobalRegistration::Match4PCSBase::PairsVector</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; int, int &gt; &gt; PairsVector</div><div class="ttdef"><b>Definition:</b> match4pcsBase.h:64</div></div>
<div class="ttc" id="a04672_xhtml"><div class="ttname"><a href="a04672.xhtml">GlobalRegistration::Sampling::UniformDistSampler</a></div><div class="ttdef"><b>Definition:</b> sampling.h:59</div></div>
<div class="ttc" id="a04652_xhtml"><div class="ttname"><a href="a04652.xhtml">GlobalRegistration::Match4PCSBase::DummyTransformVisitor</a></div><div class="ttdef"><b>Definition:</b> match4pcsBase.h:69</div></div>
<div class="ttc" id="a04692_xhtml"><div class="ttname"><a href="a04692.xhtml">GlobalRegistration::Utils::Logger</a></div><div class="ttdef"><b>Definition:</b> logger.h:62</div></div>
<div class="ttc" id="a04648_xhtml_ab770b30d192c7fbb1156382e69d8ba64"><div class="ttname"><a href="a04648.xhtml#ab770b30d192c7fbb1156382e69d8ba64">GlobalRegistration::Match4PCSBase::VectorType</a></div><div class="ttdeci">typename Point3D::VectorType VectorType</div><div class="ttdef"><b>Definition:</b> match4pcsBase.h:66</div></div>
<div class="ttc" id="a04648_xhtml_a9d1ce6ba9087e5624424871a4c0750a3"><div class="ttname"><a href="a04648.xhtml#a9d1ce6ba9087e5624424871a4c0750a3">GlobalRegistration::Match4PCSBase::distance_factor</a></div><div class="ttdeci">static constexpr Scalar distance_factor</div><div class="ttdef"><b>Definition:</b> match4pcsBase.h:77</div></div>
<div class="ttc" id="a04027_xhtml"><div class="ttname"><a href="a04027.xhtml">GlobalRegistration</a></div><div class="ttdoc">MatrixBase.homogeneous() Transform.computeRotationScaling() </div><div class="ttdef"><b>Definition:</b> bbox.h:54</div></div>
<div class="ttc" id="a04648_xhtml_a414d078256fc522cb1061e7a1dd9c749"><div class="ttname"><a href="a04648.xhtml#a414d078256fc522cb1061e7a1dd9c749">GlobalRegistration::Match4PCSBase::getFirstSampled</a></div><div class="ttdeci">const std::vector&lt; Point3D &gt; &amp; getFirstSampled() const</div><div class="ttdoc">Read access to the sampled clouds used for the registration. </div><div class="ttdef"><b>Definition:</b> match4pcsBase.h:82</div></div>
<div class="ttc" id="a04692_xhtml_a80be1cf2fd1833a5062f0699e40fc396"><div class="ttname"><a href="a04692.xhtml#a80be1cf2fd1833a5062f0699e40fc396">GlobalRegistration::Utils::Logger::Log</a></div><div class="ttdeci">void Log(const Args &amp;...args) const</div><div class="ttdef"><b>Definition:</b> logger.h:74</div></div>
<div class="ttc" id="a04648_xhtml_a60395ea978ada7861d82d6e0bcbdd47a"><div class="ttname"><a href="a04648.xhtml#a60395ea978ada7861d82d6e0bcbdd47a">GlobalRegistration::Match4PCSBase::MatrixType</a></div><div class="ttdeci">Eigen::Matrix&lt; Scalar, 4, 4 &gt; MatrixType</div><div class="ttdef"><b>Definition:</b> match4pcsBase.h:67</div></div>
<div class="ttc" id="a04030_xhtml_aca8aed96f103991f3cc1cb3f3d5ed34a"><div class="ttname"><a href="a04030.xhtml#aca8aed96f103991f3cc1cb3f3d5ed34a">GlobalRegistration::Utils::LogLevel</a></div><div class="ttdeci">LogLevel</div><div class="ttdef"><b>Definition:</b> logger.h:55</div></div>
<div class="ttc" id="a04680_xhtml_a7d4adee318864f86e62a22a4168061bb"><div class="ttname"><a href="a04680.xhtml#a7d4adee318864f86e62a22a4168061bb">GlobalRegistration::Point3D::Scalar</a></div><div class="ttdeci">float Scalar</div><div class="ttdef"><b>Definition:</b> shared4pcs.h:63</div></div>
<div class="ttc" id="a04648_xhtml_aa53647c24830f95a58a8ba3c857b6378"><div class="ttname"><a href="a04648.xhtml#aa53647c24830f95a58a8ba3c857b6378">GlobalRegistration::Match4PCSBase::DefaultSampler</a></div><div class="ttdeci">Sampling::UniformDistSampler DefaultSampler</div><div class="ttdef"><b>Definition:</b> match4pcsBase.h:73</div></div>
<div class="ttc" id="a04648_xhtml_ad73c2959940a8cd9db8b9273ac877b94"><div class="ttname"><a href="a04648.xhtml#ad73c2959940a8cd9db8b9273ac877b94">GlobalRegistration::Match4PCSBase::kLargeNumber</a></div><div class="ttdeci">static constexpr Scalar kLargeNumber</div><div class="ttdef"><b>Definition:</b> match4pcsBase.h:76</div></div>
<div class="ttc" id="a04648_xhtml"><div class="ttname"><a href="a04648.xhtml">GlobalRegistration::Match4PCSBase</a></div><div class="ttdef"><b>Definition:</b> match4pcsBase.h:61</div></div>
<div class="ttc" id="a04688_xhtml"><div class="ttname"><a href="a04688.xhtml">GlobalRegistration::Match4PCSOptions</a></div><div class="ttdoc">delta and overlap_estimation are the application parameters. All other parameters are more likely to ...</div><div class="ttdef"><b>Definition:</b> shared4pcs.h:149</div></div>
<div class="ttc" id="a04648_xhtml_ad965fe63c333bf38ed444172ab35eb08"><div class="ttname"><a href="a04648.xhtml#ad965fe63c333bf38ed444172ab35eb08">GlobalRegistration::Match4PCSBase::getSecondSampled</a></div><div class="ttdeci">const std::vector&lt; Point3D &gt; &amp; getSecondSampled() const</div><div class="ttdoc">Read access to the sampled clouds used for the registration. </div><div class="ttdef"><b>Definition:</b> match4pcsBase.h:87</div></div>
<div class="ttc" id="a04648_xhtml_aa5728ef38ba5d5d64611ffd7926198f2"><div class="ttname"><a href="a04648.xhtml#aa5728ef38ba5d5d64611ffd7926198f2">GlobalRegistration::Match4PCSBase::Scalar</a></div><div class="ttdeci">typename Point3D::Scalar Scalar</div><div class="ttdef"><b>Definition:</b> match4pcsBase.h:65</div></div>
<div class="ttc" id="a04648_xhtml_af1338e5d230103c2d8268e3fccdf351c"><div class="ttname"><a href="a04648.xhtml#af1338e5d230103c2d8268e3fccdf351c">GlobalRegistration::Match4PCSBase::kNumberOfDiameterTrials</a></div><div class="ttdeci">static constexpr int kNumberOfDiameterTrials</div><div class="ttdef"><b>Definition:</b> match4pcsBase.h:75</div></div>
<div class="ttc" id="a04648_xhtml_a1f55981546f2a1af08ad3555781f2dfe"><div class="ttname"><a href="a04648.xhtml#a1f55981546f2a1af08ad3555781f2dfe">GlobalRegistration::Match4PCSBase::~Match4PCSBase</a></div><div class="ttdeci">virtual ~Match4PCSBase()</div></div>
<div class="ttc" id="a04696_xhtml"><div class="ttname"><a href="a04696.xhtml">GlobalRegistration::Utils::Timer</a></div><div class="ttdef"><b>Definition:</b> timer.h:56</div></div>
<div class="ttc" id="a04652_xhtml_a62594155cdbf0f195df9ad3ec3c5fccc"><div class="ttname"><a href="a04652.xhtml#a62594155cdbf0f195df9ad3ec3c5fccc">GlobalRegistration::Match4PCSBase::DummyTransformVisitor::operator()</a></div><div class="ttdeci">void operator()(float, float, Eigen::Ref&lt; Match4PCSBase::MatrixType &gt;) const</div><div class="ttdef"><b>Definition:</b> match4pcsBase.h:70</div></div>
<div class="ttc" id="a04652_xhtml_a21be8f78f44b2177d39d4cd987685de3"><div class="ttname"><a href="a04652.xhtml#a21be8f78f44b2177d39d4cd987685de3">GlobalRegistration::Match4PCSBase::DummyTransformVisitor::needsGlobalTransformation</a></div><div class="ttdeci">constexpr bool needsGlobalTransformation() const</div><div class="ttdef"><b>Definition:</b> match4pcsBase.h:71</div></div>
<div class="ttc" id="a04648_xhtml_a75c9ca6da4d064f8484e432b7f795b8c"><div class="ttname"><a href="a04648.xhtml#a75c9ca6da4d064f8484e432b7f795b8c">GlobalRegistration::Match4PCSBase::ComputeTransformation</a></div><div class="ttdeci">Scalar ComputeTransformation(const std::vector&lt; Point3D &gt; &amp;P, std::vector&lt; Point3D &gt; *Q, Eigen::Ref&lt; MatrixType &gt; transformation, const Sampler &amp;sampler=Sampler(), const Visitor &amp;v=Visitor())</div><div class="ttdoc">Computes an approximation of the best LCP (directional) from Q to P and the rigid transformation that...</div><div class="ttdef"><b>Definition:</b> match4pcsBase.hpp:62</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_baa1401c71900ec02cbb70ce291537c5.xhtml">Super4PCS</a></li><li class="navelem"><a class="el" href="dir_3989a8448b4f6c51ba272a624fc2375b.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_6682cd8b4640db55889f553521d7d93d.xhtml">super4pcs</a></li><li class="navelem"><a class="el" href="dir_3690401dc38fd427f68cbc81d6adf091.xhtml">algorithms</a></li><li class="navelem"><b>match4pcsBase.h</b></li>
    <li class="footer">Generated on Tue Sep 19 2017 10:16:06 for Super4PCS Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
